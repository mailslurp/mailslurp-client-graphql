# MailSlurp API
# MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# The version of the OpenAPI document: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

# package mailslurp

# ai_controller_api

type mutation {
  # Create a transformer for reuse in automations
  # Save an AI transform instructions and schema for use with webhooks and automations
  # @param AiTranformCreateOptions aiTranformCreateOptions 
  # @return [AiTransformDto]
  CreateTransformer1(aiTranformCreateOptions: AiTranformCreateOptions): AiTransformDto

  # Create transformer mapping
  # Create AI transformer mappings to other entities
  # @param CreateAiTransformerMappingOptions createAiTransformerMappingOptions 
  # @return [AiTransformMappingDto]
  CreateTransformerMappings(createAiTransformerMappingOptions: CreateAiTransformerMappingOptions): AiTransformMappingDto

  # Delete a transformer
  # Delete an AI transformer and schemas by ID
  # @param ID! Id_ 
  # @return [null]
  DeleteTransformer(Id_: ID!): null

  # Delete transformer mapping
  # Delete an AI transformer mapping
  # @param ID! Id_ ID of transform mapping
  # @return [null]
  DeleteTransformerMapping(Id_: ID!): null

  # Delete all transformers
  # Delete all AI transformers and schemas
  # @return [null]
  DeleteTransformers(): null

  # Generate structured content for an attachment
  # Use output schemas to extract data from an attachment using AI
  # @param GenerateStructuredContentAttachmentOptions generateStructuredContentAttachmentOptions 
  # @return [StructuredContentResultDto]
  GenerateStructuredContentFromAttachment(generateStructuredContentAttachmentOptions: GenerateStructuredContentAttachmentOptions): StructuredContentResultDto

  # Generate structured content for an email
  # Use output schemas to extract data from an email using AI
  # @param GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions 
  # @return [StructuredContentResultDto]
  GenerateStructuredContentFromEmail(generateStructuredContentEmailOptions: GenerateStructuredContentEmailOptions): StructuredContentResultDto

  # Generate structured content for a TXT message
  # Use output schemas to extract data from an SMS using AI
  # @param GenerateStructuredContentSmsOptions generateStructuredContentSmsOptions 
  # @return [StructuredContentResultDto]
  GenerateStructuredContentFromSms(generateStructuredContentSmsOptions: GenerateStructuredContentSmsOptions): StructuredContentResultDto

  # Validate structured content schema
  # Check if a schema is valid and can be used to extract data using AI
  # @param StructuredOutputSchema structuredOutputSchema 
  # @return [StructuredOutputSchemaValidation]
  ValidateStructuredOutputSchema(structuredOutputSchema: StructuredOutputSchema): StructuredOutputSchemaValidation

}

type query {
  # List transformers
  # List all AI transforms
  # @param AiTranformCreateOptions options 
  # @param Int! page 
  # @param Int! size Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @return [PageAiTransformProjection]
  CreateTransformer(options: AiTranformCreateOptions, page: Int!, size: Int!, sort: String!): PageAiTransformProjection

  # Get a transformer
  # Get AI transformer and schemas by ID
  # @param ID! Id_ 
  # @return [AiTransformDto]
  GetTransformer(Id_: ID!): AiTransformDto

  # Get transformer mapping
  # Get an AI transformer mapping
  # @param ID! Id_ ID of transform mapping
  # @return [AiTransformMappingDto]
  GetTransformerMapping(Id_: ID!): AiTransformMappingDto

  # Get transformer mappings
  # Get AI transformer mappings to other entities
  # @param ID! aiTransformId 
  # @param ID! entityId 
  # @param String! entityType 
  # @param Int! page 
  # @param Int! size Optional page size. Maximum size is 100. Use page index and sort to page through larger results
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @return [PageAiTransformMappingProjection]
  GetTransformerMappings(aiTransformId: ID!, entityId: ID!, entityType: String!, page: Int!, size: Int!, sort: String!): PageAiTransformMappingProjection

  # Get transformer result
  # Get AI transformer result
  # @param ID! Id_ ID of transform result
  # @return [AiTransformResultDto]
  GetTransformerResult(Id_: ID!): AiTransformResultDto

  # Get transformer results
  # Get AI transformer results
  # @param ID! aiTransformId 
  # @param ID! aiTransformMappingId 
  # @param ID! entityId 
  # @param String! entityType 
  # @param Int! page 
  # @param Int! size Optional page size. Maximum size is 100. Use page index and sort to page through larger results
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @return [PageAiTransformResultProjection]
  GetTransformerResults(aiTransformId: ID!, aiTransformMappingId: ID!, entityId: ID!, entityType: String!, page: Int!, size: Int!, sort: String!): PageAiTransformResultProjection

}

