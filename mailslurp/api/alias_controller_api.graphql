# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
# The version of the OpenAPI document: 6.5.2
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

# package mailslurp

# alias_controller_api

type mutation {
  # Create an email alias. Must be verified by clicking link inside verification email that will be sent to the address. Once verified the alias will be active.
  # Email aliases use a MailSlurp randomly generated email address (or a custom domain inbox that you provide) to mask or proxy a real email address. Emails sent to the alias address will be forwarded to the hidden email address it was created for. If you want to send a reply use the threadId attached
  # @param CreateAliasOptions createAliasOptions createAliasOptions
  # @return [AliasDto]
  CreateAlias(createAliasOptions: CreateAliasOptions): AliasDto

  # Delete an email alias
  # @param ID! aliasId aliasId
  # @return [null]
  DeleteAlias(aliasId: ID!): null

  # Reply to an email
  # Send the reply to the email sender or reply-to and include same subject cc bcc etc. Reply to an email and the contents will be sent with the existing subject to the emails &#x60;to&#x60;, &#x60;cc&#x60;, and &#x60;bcc&#x60;.
  # @param ID! aliasId ID of the alias that email belongs to
  # @param ID! emailId ID of the email that should be replied to
  # @param ReplyToAliasEmailOptions replyToAliasEmailOptions replyToAliasEmailOptions
  # @return [SentEmailDto]
  ReplyToEmail(aliasId: ID!, emailId: ID!, replyToAliasEmailOptions: ReplyToAliasEmailOptions): SentEmailDto

  # Send an email from an alias inbox
  # Send an email from an alias. Replies to the email will be forwared to the alias masked email address
  # @param ID! aliasId aliasId
  # @param SendEmailOptions sendEmailOptions Options for the email to be sent
  # @return [SentEmailDto]
  SendAliasEmail(aliasId: ID!, sendEmailOptions: SendEmailOptions): SentEmailDto

  # Update an email alias
  # @param ID! aliasId aliasId
  # @param UpdateAliasOptions updateAliasOptions updateAliasOptions
  # @return [null]
  UpdateAlias(aliasId: ID!, updateAliasOptions: UpdateAliasOptions): null

}

type query {
  # Get an email alias
  # Get an email alias by ID
  # @param ID! aliasId aliasId
  # @return [AliasDto]
  GetAlias(aliasId: ID!): AliasDto

  # Get emails for an alias
  # Get paginated emails for an alias by ID
  # @param ID! aliasId aliasId
  # @param Int! page Optional page index alias email list pagination
  # @param Int! size Optional page size alias email list pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @return [PageEmailProjection]
  GetAliasEmails(aliasId: ID!, page: Int!, size: Int!, sort: String!): PageEmailProjection

  # Get threads created for an alias
  # Returns threads created for an email alias in paginated form
  # @param ID! aliasId aliasId
  # @param Int! page Optional page index in thread list pagination
  # @param Int! size Optional page size in thread list pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @return [PageThreadProjection]
  GetAliasThreads(aliasId: ID!, page: Int!, size: Int!, sort: String!): PageThreadProjection

  # Get all email aliases you have created
  # Get all email aliases in paginated form
  # @param Int! page Optional page index in alias list pagination
  # @param Int! size Optional page size in alias list pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @return [PageAlias]
  GetAliases(page: Int!, size: Int!, sort: String!): PageAlias

}

