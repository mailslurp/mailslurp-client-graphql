# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# The version of the OpenAPI document: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

# package mailslurp

# attachment_controller_api

type mutation {
  # Delete all attachments
  # @return [null]
  DeleteAllAttachments(): null

  # Delete an attachment
  # @param String! attachmentId ID of attachment
  # @return [null]
  DeleteAttachment(attachmentId: String!): null

  # Upload an attachment for sending using base64 file encoding. Returns an array whose first element is the ID of the uploaded attachment.
  # @param UploadAttachmentOptions uploadAttachmentOptions 
  # @return [[String!]]
  UploadAttachment(uploadAttachmentOptions: UploadAttachmentOptions): [String!]

  # Upload an attachment for sending using file byte stream input octet stream. Returns an array whose first element is the ID of the uploaded attachment.
  # @param String! contentType 
  # @param String! contentType2 Optional contentType for file. For instance &#x60;application/pdf&#x60;
  # @param String! contentId Optional content ID (CID) to save upload with
  # @param String! filename Optional filename to save upload with
  # @param String! filename2 
  # @return [[String!]]
  UploadAttachmentBytes(contentType: String!, contentType2: String!, contentId: String!, filename: String!, filename2: String!): [String!]

  # Upload an attachment for sending using a Multipart Form request. Returns an array whose first element is the ID of the uploaded attachment.
  # @param String! contentId Optional content ID of attachment
  # @param String! contentType Optional content type of attachment
  # @param String! filename Optional name of file
  # @param String! xFilename Optional content type header of attachment
  # @param InlineObject inlineObject 
  # @return [[String!]]
  UploadMultipartForm(contentId: String!, contentType: String!, filename: String!, xFilename: String!, inlineObject: InlineObject): [String!]

}

type query {
  # Get email attachment as base64 encoded string as alternative to binary responses. To read the content decode the Base64 encoded contents.
  # Returns the specified attachment for a given email as a base 64 encoded string. The response type is application/json. This method is similar to the &#x60;downloadAttachment&#x60; method but allows some clients to get around issues with binary responses.
  # @param String! attachmentId ID of attachment
  # @return [DownloadAttachmentDto]
  DownloadAttachmentAsBase64Encoded(attachmentId: String!): DownloadAttachmentDto

  # Download attachments. Get email attachment bytes. If you have trouble with byte responses try the &#x60;downloadAttachmentBase64&#x60; response endpoints.
  # Returns the specified attachment for a given email as a stream / array of bytes. You can find attachment ids in email responses endpoint responses. The response type is application/octet-stream.
  # @param String! attachmentId ID of attachment
  # @return [String!]
  DownloadAttachmentAsBytes(attachmentId: String!): String!

  # Get an attachment entity
  # @param String! attachmentId ID of attachment
  # @return [AttachmentEntity]
  GetAttachment(attachmentId: String!): AttachmentEntity

  # Get email attachment metadata information
  # Returns the metadata for an attachment. It is saved separately to the content of the attachment. Contains properties &#x60;name&#x60; and &#x60;content-type&#x60; and &#x60;content-length&#x60; in bytes for a given attachment.
  # @param String! attachmentId ID of attachment
  # @return [AttachmentMetaData]
  GetAttachmentInfo(attachmentId: String!): AttachmentMetaData

  # Get email attachments
  # Get all attachments in paginated response. Each entity contains meta data for the attachment such as &#x60;name&#x60; and &#x60;content-type&#x60;. Use the &#x60;attachmentId&#x60; and the download endpoints to get the file contents.
  # @param Int! page Optional page index for list pagination
  # @param Int! size Optional page size for list pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param String! fileNameFilter Optional file name and content type search filter
  # @param String! since Filter by created at after the given timestamp
  # @param String! before Filter by created at before the given timestamp
  # @return [PageAttachmentEntity]
  GetAttachments(page: Int!, size: Int!, sort: String!, fileNameFilter: String!, since: String!, before: String!): PageAttachmentEntity

}

