# MailSlurp API
# MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# The version of the OpenAPI document: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

# package mailslurp

# common_actions_controller_api

type mutation {
  # Create new random inbox
  # Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
  # @param Boolean! allowTeamAccess 
  # @param Boolean! useDomainPool 
  # @param String! expiresAt 
  # @param Int! expiresIn 
  # @param String! emailAddress 
  # @param String! inboxType 
  # @param String! description 
  # @param String! name 
  # @param [String!] tags 
  # @param Boolean! favourite 
  # @param Boolean! virtualInbox 
  # @param Boolean! useShortAddress 
  # @param String! domainName 
  # @param ID! domainId 
  # @param String! prefix 
  # @return [InboxDto]
  CreateNewEmailAddress(allowTeamAccess: Boolean!, useDomainPool: Boolean!, expiresAt: String!, expiresIn: Int!, emailAddress: String!, inboxType: String!, description: String!, name: String!, tags: [String!], favourite: Boolean!, virtualInbox: Boolean!, useShortAddress: Boolean!, domainName: String!, domainId: ID!, prefix: String!): InboxDto

  # Create new random inbox
  # Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
  # @param Boolean! allowTeamAccess 
  # @param Boolean! useDomainPool 
  # @param String! expiresAt 
  # @param Int! expiresIn 
  # @param String! emailAddress 
  # @param String! inboxType 
  # @param String! description 
  # @param String! name 
  # @param [String!] tags 
  # @param Boolean! favourite 
  # @param Boolean! virtualInbox 
  # @param Boolean! useShortAddress 
  # @param String! domainName 
  # @param ID! domainId 
  # @param String! prefix 
  # @return [InboxDto]
  CreateRandomInbox(allowTeamAccess: Boolean!, useDomainPool: Boolean!, expiresAt: String!, expiresIn: Int!, emailAddress: String!, inboxType: String!, description: String!, name: String!, tags: [String!], favourite: Boolean!, virtualInbox: Boolean!, useShortAddress: Boolean!, domainName: String!, domainId: ID!, prefix: String!): InboxDto

  # Delete inbox email address by inbox id
  # Deletes inbox email address
  # @param ID! inboxId ID of inbox to delete
  # @return [null]
  DeleteEmailAddress(inboxId: ID!): null

  # Delete all emails in an inbox
  # Deletes all emails
  # @param ID! inboxId ID of inbox to empty
  # @return [null]
  EmptyInbox(inboxId: ID!): null

  # Send an email using query parameters
  # If no senderId or inboxId provided a random email address will be used to send from. Ensure your parameters are URL encoded.
  # @param String! to Email address to send to
  # @param ID! senderId ID of inbox to send from. If null an inbox will be created for sending
  # @param String! body Body of the email message. Supports HTML
  # @param String! subject Subject line of the email
  # @return [null]
  SendEmailQuery(to: String!, senderId: ID!, body: String!, subject: String!): null

  # Send an email
  # If no senderId or inboxId provided a random email address will be used to send from.
  # @param SimpleSendEmailOptions simpleSendEmailOptions 
  # @return [null]
  SendEmailSimple(simpleSendEmailOptions: SimpleSendEmailOptions): null

}

type query {
}

