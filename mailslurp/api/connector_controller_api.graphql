# MailSlurp API
# MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# The version of the OpenAPI document: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

# package mailslurp

# connector_controller_api

type mutation {
  # Create an inbox connector
  # Sync emails between external mailboxes and MailSlurp inboxes
  # @param CreateConnectorOptions createConnectorOptions 
  # @param ID! inboxId Optional inbox ID to associate with the connector
  # @return [ConnectorDto]
  CreateConnector(createConnectorOptions: CreateConnectorOptions, inboxId: ID!): ConnectorDto

  # Create an inbox connector IMAP connection
  # Allows the reading of emails in an external mailbox and syncing to a MailSlurp inbox
  # @param ID! Id_ 
  # @param CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions 
  # @return [ConnectorImapConnectionDto]
  CreateConnectorImapConnection(Id_: ID!, createConnectorImapConnectionOptions: CreateConnectorImapConnectionOptions): ConnectorImapConnectionDto

  # Create an inbox connector SMTP connection
  # Allows sending via connector and email is routed to connected inbox and sent via SMTP
  # @param ID! Id_ 
  # @param CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions 
  # @return [ConnectorSmtpConnectionDto]
  CreateConnectorSmtpConnection(Id_: ID!, createConnectorSmtpConnectionOptions: CreateConnectorSmtpConnectionOptions): ConnectorSmtpConnectionDto

  # Create an inbox connector sync settings
  # Configure automatic pull or emails from external inboxes using an interval or schedule
  # @param ID! Id_ 
  # @param CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions 
  # @return [ConnectorSyncSettingsDto]
  CreateConnectorSyncSettings(Id_: ID!, createConnectorSyncSettingsOptions: CreateConnectorSyncSettingsOptions): ConnectorSyncSettingsDto

  # Create an inbox connector with options
  # Sync emails between external mailboxes and MailSlurp inboxes
  # @param CreateConnectorWithOptions createConnectorWithOptions 
  # @param ID! inboxId Optional inbox ID to associate with the connector
  # @return [ConnectorDto]
  CreateConnectorWithOptions(createConnectorWithOptions: CreateConnectorWithOptions, inboxId: ID!): ConnectorDto

  # Delete all inbox connectors
  # @return [null]
  DeleteAllConnector(): null

  # Delete an inbox connector
  # @param ID! Id_ 
  # @return [null]
  DeleteConnector(Id_: ID!): null

  # Delete an inbox connector IMAP connection
  # Delete IMAP connection for external inbox
  # @param ID! Id_ 
  # @return [null]
  DeleteConnectorImapConnection(Id_: ID!): null

  # Delete an inbox connector SMTP connection
  # Delete SMTP connection for external inbox
  # @param ID! Id_ 
  # @return [null]
  DeleteConnectorSmtpConnection(Id_: ID!): null

  # Create an inbox connector sync settings
  # Configure automatic pull or emails from external inboxes using an interval or schedule
  # @param ID! Id_ 
  # @return [null]
  DeleteConnectorSyncSettings(Id_: ID!): null

  # Send from an inbox connector
  # @param ID! Id_ 
  # @param SendEmailOptions sendEmailOptions 
  # @param Boolean! useFallback 
  # @return [SentEmailDto]
  SendEmailFromConnector(Id_: ID!, sendEmailOptions: SendEmailOptions, useFallback: Boolean!): SentEmailDto

  # Sync an inbox connector
  # @param ID! Id_ 
  # @param String! since Date to request emails since
  # @param String! folder Which folder to sync emails with
  # @param Boolean! logging Enable or disable logging for the sync operation
  # @return [ConnectorSyncRequestResult]
  SyncConnector(Id_: ID!, since: String!, folder: String!, logging: Boolean!): ConnectorSyncRequestResult

  # Test an inbox connector IMAP connection
  # Test the IMAP connection for a connector
  # @param ID! Id_ 
  # @param CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions 
  # @return [ConnectorImapConnectionTestResult]
  TestConnectorImapConnection(Id_: ID!, createConnectorImapConnectionOptions: CreateConnectorImapConnectionOptions): ConnectorImapConnectionTestResult

  # Test an inbox connector IMAP connection options
  # Test the IMAP connection options for a connector
  # @param CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions 
  # @return [ConnectorImapConnectionTestResult]
  TestConnectorImapConnectionOptions(createConnectorImapConnectionOptions: CreateConnectorImapConnectionOptions): ConnectorImapConnectionTestResult

  # Test an inbox connector SMTP connection
  # Test the SMTP connection for a connector
  # @param ID! Id_ 
  # @param CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions 
  # @return [ConnectorSmtpConnectionTestResult]
  TestConnectorSmtpConnection(Id_: ID!, createConnectorSmtpConnectionOptions: CreateConnectorSmtpConnectionOptions): ConnectorSmtpConnectionTestResult

  # Test an inbox connector SMTP connection options
  # Test the SMTP connection options for a connector
  # @param CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions 
  # @return [ConnectorSmtpConnectionTestResult]
  TestConnectorSmtpConnectionOptions(createConnectorSmtpConnectionOptions: CreateConnectorSmtpConnectionOptions): ConnectorSmtpConnectionTestResult

  # Update an inbox connector
  # @param ID! Id_ 
  # @param CreateConnectorOptions createConnectorOptions 
  # @return [ConnectorDto]
  UpdateConnector(Id_: ID!, createConnectorOptions: CreateConnectorOptions): ConnectorDto

  # Update an inbox connector IMAP connection
  # Update IMAP connection for external inbox
  # @param ID! Id_ 
  # @param CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions 
  # @return [ConnectorImapConnectionDto]
  UpdateConnectorImapConnection(Id_: ID!, createConnectorImapConnectionOptions: CreateConnectorImapConnectionOptions): ConnectorImapConnectionDto

  # Update an inbox connector SMTP connection
  # Update SMTP connection for external inbox
  # @param ID! Id_ 
  # @param CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions 
  # @return [ConnectorSmtpConnectionDto]
  UpdateConnectorSmtpConnection(Id_: ID!, createConnectorSmtpConnectionOptions: CreateConnectorSmtpConnectionOptions): ConnectorSmtpConnectionDto

}

type query {
  # Get all inbox connector events
  # @param ID! Id_ Optional connector ID
  # @param Int! page Optional page index in connector list pagination
  # @param Int! size Optional page size in connector list pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param String! since Filter by created at after the given timestamp
  # @param String! before Filter by created at before the given timestamp
  # @param String! eventType Filter by event type
  # @return [PageConnectorEvents]
  GetAllConnectorEvents(Id_: ID!, page: Int!, size: Int!, sort: String!, since: String!, before: String!, eventType: String!): PageConnectorEvents

  # Get an inbox connector
  # @param ID! Id_ 
  # @return [ConnectorDto]
  GetConnector(Id_: ID!): ConnectorDto

  # Get connector by email address
  # Find an inbox connector by email address
  # @param String! emailAddress Email address to search for connector by
  # @return [OptionalConnectorDto]
  GetConnectorByEmailAddress(emailAddress: String!): OptionalConnectorDto

  # Get connector by inbox ID
  # Find an inbox connector by inbox ID
  # @param ID! inboxId Inbox ID to search for connector by
  # @return [OptionalConnectorDto]
  GetConnectorByInboxId(inboxId: ID!): OptionalConnectorDto

  # Get connector by name
  # Find an inbox connector by name
  # @param String! name Name to search for connector by
  # @return [OptionalConnectorDto]
  GetConnectorByName(name: String!): OptionalConnectorDto

  # Get an inbox connector event
  # @param ID! Id_ 
  # @return [ConnectorEventDto]
  GetConnectorEvent(Id_: ID!): ConnectorEventDto

  # Get an inbox connector events
  # @param ID! Id_ 
  # @param Int! page Optional page index in connector list pagination
  # @param Int! size Optional page size in connector list pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param String! since Filter by created at after the given timestamp
  # @param String! before Filter by created at before the given timestamp
  # @param String! eventType Filter by event type
  # @return [PageConnectorEvents]
  GetConnectorEvents(Id_: ID!, page: Int!, size: Int!, sort: String!, since: String!, before: String!, eventType: String!): PageConnectorEvents

  # Get an inbox connector IMAP connection
  # Get IMAP connection for external inbox
  # @param ID! Id_ 
  # @return [OptionalConnectorImapConnectionDto]
  GetConnectorImapConnection(Id_: ID!): OptionalConnectorImapConnectionDto

  # Get SMTP and IMAP connection settings for common mail providers
  # Get common mail provider SMTP and IMAP connection settings
  # @return [ConnectorProviderSettingsDto]
  GetConnectorProviderSettings(): ConnectorProviderSettingsDto

  # Get an inbox connector SMTP connection
  # Get SMTP connection for external inbox
  # @param ID! Id_ 
  # @return [OptionalConnectorSmtpConnectionDto]
  GetConnectorSmtpConnection(Id_: ID!): OptionalConnectorSmtpConnectionDto

  # Get an inbox connector sync settings
  # Get sync settings for connection with external inbox
  # @param ID! Id_ 
  # @return [OptionalConnectorSyncSettingsDto]
  GetConnectorSyncSettings(Id_: ID!): OptionalConnectorSyncSettingsDto

  # Get inbox connectors
  # List inbox connectors that sync external emails to MailSlurp inboxes
  # @param Int! page Optional page index in connector list pagination
  # @param Int! size Optional page size in connector list pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param String! since Filter by created at after the given timestamp
  # @param String! before Filter by created at before the given timestamp
  # @return [PageConnector]
  GetConnectors(page: Int!, size: Int!, sort: String!, since: String!, before: String!): PageConnector

}

