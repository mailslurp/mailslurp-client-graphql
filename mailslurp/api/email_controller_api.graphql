# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
# The version of the OpenAPI document: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

# package mailslurp

# email_controller_api

type mutation {
  # Set IMAP flags associated with a message. Only supports &#39;\\Seen&#39; flag.
  # Apply RFC3501 section-2.3.2 IMAP flag operations on an email
  # @param ID! emailId 
  # @param ImapFlagOperationOptions imapFlagOperationOptions 
  # @return [EmailPreview]
  ApplyImapFlagOperation(emailId: ID!, imapFlagOperationOptions: ImapFlagOperationOptions): EmailPreview

  # Delete all emails in all inboxes.
  # Deletes all emails in your account. Be careful as emails cannot be recovered
  # @return [null]
  DeleteAllEmails(): null

  # Delete an email
  # Deletes an email and removes it from the inbox. Deleted emails cannot be recovered.
  # @param ID! emailId ID of email to delete
  # @return [null]
  DeleteEmail(emailId: ID!): null

  # Forward email to recipients
  # Forward an existing email to new recipients. The sender of the email will be the inbox that received the email you are forwarding. You can override the sender with the &#x60;from&#x60; option. Note you must have access to the from address in MailSlurp to use the override. For more control consider fetching the email and sending it a new using the send email endpoints.
  # @param ID! emailId ID of email
  # @param ForwardEmailOptions forwardEmailOptions 
  # @return [SentEmailDto]
  ForwardEmail(emailId: ID!, forwardEmailOptions: ForwardEmailOptions): SentEmailDto

  # Get email content regex pattern match results. Runs regex against email body and returns match groups.
  # Return the matches for a given Java style regex pattern. Do not include the typical &#x60;/&#x60; at start or end of regex in some languages. Given an example &#x60;your code is: 12345&#x60; the pattern to extract match looks like &#x60;code is: (\\d{6})&#x60;. This will return an array of matches with the first matching the entire pattern and the subsequent matching the groups: &#x60;[&#39;code is: 123456&#39;, &#39;123456&#39;]&#x60; See https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html for more information of available patterns. 
  # @param ID! emailId ID of email to match against
  # @param ContentMatchOptions contentMatchOptions 
  # @return [EmailContentMatchResult]
  GetEmailContentMatch(emailId: ID!, contentMatchOptions: ContentMatchOptions): EmailContentMatchResult

  # Mark an email as read on unread
  # Marks an email as read or unread. Pass boolean read flag to set value. This is useful if you want to read an email but keep it as unread
  # @param ID! emailId 
  # @param Boolean! read What value to assign to email read property. Default true.
  # @return [EmailPreview]
  MarkAsRead(emailId: ID!, read: Boolean!): EmailPreview

  # Reply to an email
  # Send the reply to the email sender or reply-to and include same subject cc bcc etc. Reply to an email and the contents will be sent with the existing subject to the emails &#x60;to&#x60;, &#x60;cc&#x60;, and &#x60;bcc&#x60;.
  # @param ID! emailId ID of the email that should be replied to
  # @param ReplyToEmailOptions replyToEmailOptions 
  # @return [SentEmailDto]
  ReplyToEmail(emailId: ID!, replyToEmailOptions: ReplyToEmailOptions): SentEmailDto

  # Send email
  # Alias for &#x60;InboxController.sendEmail&#x60; method - see original method for full details. Sends an email from a given inbox that you have created. If no inbox is supplied a random inbox will be created for you and used to send the email.
  # @param ID! inboxId ID of the inbox you want to send the email from
  # @param SendEmailOptions sendEmailOptions 
  # @param Boolean! useDomainPool Use domain pool. Optionally create inbox to send from using the mailslurp domain pool.
  # @return [null]
  SendEmailSourceOptional(inboxId: ID!, sendEmailOptions: SendEmailOptions, useDomainPool: Boolean!): null

  # Validate email HTML contents
  # Validate the HTML content of email if HTML is found. Considered valid if no HTML is present.
  # @param ID! emailId ID of email
  # @return [ValidationDto]
  ValidateEmail(emailId: ID!): ValidationDto

}

type query {
  # Get email attachment bytes. Returned as &#x60;octet-stream&#x60; with content type header. If you have trouble with byte responses try the &#x60;downloadAttachmentBase64&#x60; response endpoints and convert the base 64 encoded content to a file or string.
  # Returns the specified attachment for a given email as a stream / array of bytes. You can find attachment ids in email responses endpoint responses. The response type is application/octet-stream.
  # @param ID! emailId ID of email
  # @param String! attachmentId ID of attachment
  # @param String! apiKey Can pass apiKey in url for this request if you wish to download the file in a browser. Content type will be set to original content type of the attachment file. This is so that browsers can download the file correctly.
  # @return [String!]
  DownloadAttachment(emailId: ID!, attachmentId: String!, apiKey: String!): String!

  # Get email attachment as base64 encoded string as an alternative to binary responses. Decode the &#x60;base64FileContents&#x60; as a &#x60;utf-8&#x60; encoded string or array of bytes depending on the &#x60;contentType&#x60;.
  # Returns the specified attachment for a given email as a base 64 encoded string. The response type is application/json. This method is similar to the &#x60;downloadAttachment&#x60; method but allows some clients to get around issues with binary responses.
  # @param ID! emailId ID of email
  # @param String! attachmentId ID of attachment
  # @return [DownloadAttachmentDto]
  DownloadAttachmentBase64(emailId: ID!, attachmentId: String!): DownloadAttachmentDto

  # Get email body as string. Returned as &#x60;plain/text&#x60; with content type header.
  # Returns the specified email body for a given email as a string
  # @param ID! emailId ID of email
  # @return [String!]
  DownloadBody(emailId: ID!): String!

  # Get email body in bytes. Returned as &#x60;octet-stream&#x60; with content type header.
  # Returns the specified email body for a given email as a stream / array of bytes.
  # @param ID! emailId ID of email
  # @return [String!]
  DownloadBodyBytes(emailId: ID!): String!

  # Get email attachment metadata. This is the &#x60;contentType&#x60; and &#x60;contentLength&#x60; of an attachment. To get the individual attachments  use the &#x60;downloadAttachment&#x60; methods.
  # Returns the metadata such as name and content-type for a given attachment and email.
  # @param ID! emailId ID of email
  # @param String! attachmentId ID of attachment
  # @return [AttachmentMetaData]
  GetAttachmentMetaData(emailId: ID!, attachmentId: String!): AttachmentMetaData

  # Get email content including headers and body. Expects email to exist by ID. For emails that may not have arrived yet use the WaitForController.
  # Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawEmail endpoints
  # @param ID! emailId 
  # @param Boolean! decode Decode email body quoted-printable encoding to plain text. SMTP servers often encode text using quoted-printable format (for instance &#x60;&#x3D;D7&#x60;). This can be a pain for testing
  # @return [Email]
  GetEmail(emailId: ID!, decode: Boolean!): Email

  # Get all email attachment metadata. Metadata includes name and size of attachments.
  # Returns an array of attachment metadata such as name and content-type for a given email if present.
  # @param ID! emailId ID of email
  # @return [[AttachmentMetaData]]
  GetEmailAttachments(emailId: ID!): [AttachmentMetaData]

  # Get email count
  # @return [CountDto]
  GetEmailCount(): CountDto

  # Get email content as HTML. For displaying emails in browser context.
  # Retrieve email content as HTML response for viewing in browsers. Decodes quoted-printable entities and converts charset to UTF-8. Pass your API KEY as a request parameter when viewing in a browser: &#x60;?apiKey&#x3D;xxx&#x60;
  # @param ID! emailId 
  # @param Boolean! decode 
  # @return [String!]
  GetEmailHTML(emailId: ID!, decode: Boolean!): String!

  # Parse and return text from an email, stripping HTML and decoding encoded characters
  # Parse an email body and return the content as an array of text. HTML parsing uses JSoup which supports JQuery/CSS style selectors
  # @param ID! emailId ID of email to perform HTML query on
  # @param String! htmlSelector HTML selector to search for. Uses JQuery/JSoup/CSS style selector like &#39;.my-div&#39; to match content. See https://jsoup.org/apidocs/org/jsoup/select/Selector.html for more information.
  # @return [EmailTextLinesResult]
  GetEmailHTMLQuery(emailId: ID!, htmlSelector: String!): EmailTextLinesResult

  # Parse and return list of links found in an email (only works for HTML content)
  # HTML parsing uses JSoup and UNIX line separators. Searches content for href attributes
  # @param ID! emailId ID of email to fetch text for
  # @return [EmailLinksResult]
  GetEmailLinks(emailId: ID!): EmailLinksResult

  # Get email URLs for viewing in browser or downloading
  # Get a list of URLs for email content as text/html or raw SMTP message for viewing the message in a browser.
  # @param ID! emailId 
  # @return [EmailPreviewUrls]
  GetEmailPreviewURLs(emailId: ID!): EmailPreviewUrls

  # Parse and return text from an email, stripping HTML and decoding encoded characters
  # Parse an email body and return the content as an array of strings. HTML parsing uses JSoup and UNIX line separators.
  # @param ID! emailId ID of email to fetch text for
  # @param Boolean! decodeHtmlEntities Decode HTML entities
  # @param String! lineSeparator Line separator character
  # @return [EmailTextLinesResult]
  GetEmailTextLines(emailId: ID!, decodeHtmlEntities: Boolean!, lineSeparator: String!): EmailTextLinesResult

  # Get all emails in all inboxes in paginated form. Email API list all.
  # By default returns all emails across all inboxes sorted by ascending created at date. Responses are paginated. You can restrict results to a list of inbox IDs. You can also filter out read messages
  # @param [ID!] inboxId Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account.
  # @param Int! page Optional page index in email list pagination
  # @param Int! size Optional page size in email list pagination. Maximum size is 100. Use page index and sort to page through larger results
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param Boolean! unreadOnly Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly
  # @param String! searchFilter Optional search filter. Searches email recipients, sender, subject, email address and ID. Does not search email body
  # @param String! since Optional filter emails received after given date time
  # @param String! before Optional filter emails received before given date time
  # @return [PageEmailProjection]
  GetEmailsPaginated(inboxId: [ID!], page: Int!, size: Int!, sort: String!, unreadOnly: Boolean!, searchFilter: String!, since: String!, before: String!): PageEmailProjection

  # Get gravatar url for email address
  # @param String! emailAddress 
  # @param String! size 
  # @return [GravatarUrl]
  GetGravatarUrlForEmailAddress(emailAddress: String!, size: String!): GravatarUrl

  # Get latest email in all inboxes. Most recently received.
  # Get the newest email in all inboxes or in a passed set of inbox IDs
  # @param [ID!] inboxIds Optional set of inboxes to filter by. Only get the latest email from these inbox IDs. If not provided will search across all inboxes
  # @return [Email]
  GetLatestEmail(inboxIds: [ID!]): Email

  # Get latest email in an inbox. Use &#x60;WaitForController&#x60; to get emails that may not have arrived yet.
  # Get the newest email in all inboxes or in a passed set of inbox IDs
  # @param ID! inboxId ID of the inbox you want to get the latest email from
  # @return [Email]
  GetLatestEmailInInbox1(inboxId: ID!): Email

  # Get all organization emails. List team or shared test email accounts
  # By default returns all emails across all team inboxes sorted by ascending created at date. Responses are paginated. You can restrict results to a list of inbox IDs. You can also filter out read messages
  # @param [ID!] inboxId Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account.
  # @param Int! page Optional page index in email list pagination
  # @param Int! size Optional page size in email list pagination. Maximum size is 100. Use page index and sort to page through larger results
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param Boolean! unreadOnly Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly
  # @param String! searchFilter Optional search filter search filter for emails.
  # @param String! since Optional filter emails received after given date time
  # @param String! before Optional filter emails received before given date time
  # @return [PageEmailProjection]
  GetOrganizationEmailsPaginated(inboxId: [ID!], page: Int!, size: Int!, sort: String!, unreadOnly: Boolean!, searchFilter: String!, since: String!, before: String!): PageEmailProjection

  # Get raw email string. Returns unparsed raw SMTP message with headers and body.
  # Returns a raw, unparsed, and unprocessed email. If your client has issues processing the response it is likely due to the response content-type which is text/plain. If you need a JSON response content-type use the getRawEmailJson endpoint
  # @param ID! emailId ID of email
  # @return [String!]
  GetRawEmailContents(emailId: ID!): String!

  # Get raw email in JSON. Unparsed SMTP message in JSON wrapper format.
  # Returns a raw, unparsed, and unprocessed email wrapped in a JSON response object for easier handling when compared with the getRawEmail text/plain response
  # @param ID! emailId ID of email
  # @return [RawEmailJson]
  GetRawEmailJson(emailId: ID!): RawEmailJson

  # Get unread email count
  # Get number of emails unread. Unread means has not been viewed in dashboard or returned in an email API response
  # @return [UnreadCount]
  GetUnreadEmailCount(): UnreadCount

}

