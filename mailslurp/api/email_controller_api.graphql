# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
# The version of the OpenAPI document: 6.5.2
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

# package mailslurp

# email_controller_api

type mutation {
  # Delete all emails
  # Deletes all emails in your account. Be careful as emails cannot be recovered
  # @return [null]
  DeleteAllEmails(): null

  # Delete an email
  # Deletes an email and removes it from the inbox. Deleted emails cannot be recovered.
  # @param ID! emailId ID of email to delete
  # @return [null]
  DeleteEmail(emailId: ID!): null

  # Forward email
  # Forward an existing email to new recipients.
  # @param ID! emailId ID of email
  # @param ForwardEmailOptions forwardEmailOptions forwardEmailOptions
  # @return [null]
  ForwardEmail(emailId: ID!, forwardEmailOptions: ForwardEmailOptions): null

  # Validate email
  # Validate the HTML content of email if HTML is found. Considered valid if no HTML.
  # @param ID! emailId ID of email
  # @return [ValidationDto]
  ValidateEmail(emailId: ID!): ValidationDto

}

type query {
  # Get email attachment bytes. If you have trouble with byte responses try the &#x60;downloadAttachmentBase64&#x60; response endpoints.
  # Returns the specified attachment for a given email as a stream / array of bytes. You can find attachment ids in email responses endpoint responses. The response type is application/octet-stream.
  # @param String! attachmentId ID of attachment
  # @param ID! emailId ID of email
  # @param String! apiKey Can pass apiKey in url for this request if you wish to download the file in a browser. Content type will be set to original content type of the attachment file. This is so that browsers can download the file correctly.
  # @return [String!]
  DownloadAttachment(attachmentId: String!, emailId: ID!, apiKey: String!): String!

  # Get email attachment as base64 encoded string (alternative to binary responses)
  # Returns the specified attachment for a given email as a base 64 encoded string. The response type is application/json. This method is similar to the &#x60;downloadAttachment&#x60; method but allows some clients to get around issues with binary responses.
  # @param String! attachmentId ID of attachment
  # @param ID! emailId ID of email
  # @return [DownloadAttachmentDto]
  DownloadAttachmentBase64(attachmentId: String!, emailId: ID!): DownloadAttachmentDto

  # Get email attachment metadata
  # Returns the metadata such as name and content-type for a given attachment and email.
  # @param String! attachmentId ID of attachment
  # @param ID! emailId ID of email
  # @return [AttachmentMetaData]
  GetAttachmentMetaData(attachmentId: String!, emailId: ID!): AttachmentMetaData

  # Get all email attachment metadata
  # Returns an array of attachment metadata such as name and content-type for a given email if present.
  # @param ID! emailId ID of email
  # @return [[AttachmentMetaData]]
  GetAttachments(emailId: ID!): [AttachmentMetaData]

  # Get email content
  # Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawEmail endpoints
  # @param ID! emailId emailId
  # @param Boolean! decode Decode email body quoted-printable encoding to plain text. SMTP servers often encode text using quoted-printable format (for instance &#x60;&#x3D;D7&#x60;). This can be a pain for testing
  # @return [Email]
  GetEmail(emailId: ID!, decode: Boolean!): Email

  # Get email content regex pattern match results. Runs regex against email body and returns match groups.
  # Return the matches for a given Java style regex pattern. Do not include the typical &#x60;/&#x60; at start or end of regex in some languages. Given an example &#x60;your code is: 12345&#x60; the pattern to extract match looks like &#x60;code is: (\\d{6})&#x60;. This will return an array of matches with the first matching the entire pattern and the subsequent matching the groups: &#x60;[&#39;code is: 123456&#39;, &#39;123456&#39;]&#x60; See https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html for more information of available patterns.
  # @param ID! emailId ID of email to match against
  # @param ContentMatchOptions contentMatchOptions contentMatchOptions
  # @return [EmailContentMatchResult]
  GetEmailContentMatch(emailId: ID!, contentMatchOptions: ContentMatchOptions): EmailContentMatchResult

  # Get email content as HTML
  # Retrieve email content as HTML response for viewing in browsers. Decodes quoted-printable entities and converts charset to UTF-8. Pass your API KEY as a request parameter when viewing in a browser: &#x60;?apiKey&#x3D;xxx&#x60;
  # @param ID! emailId emailId
  # @param Boolean! decode decode
  # @return [String!]
  GetEmailHTML(emailId: ID!, decode: Boolean!): String!

  # Get all emails
  # By default returns all emails across all inboxes sorted by ascending created at date. Responses are paginated. You can restrict results to a list of inbox IDs. You can also filter out read messages
  # @param [ID!] inboxId Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account.
  # @param Int! page Optional page index in email list pagination
  # @param Int! size Optional page size in email list pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param Boolean! unreadOnly Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly
  # @return [PageEmailProjection]
  GetEmailsPaginated(inboxId: [ID!], page: Int!, size: Int!, sort: String!, unreadOnly: Boolean!): PageEmailProjection

  # Get raw email string
  # Returns a raw, unparsed, and unprocessed email. If your client has issues processing the response it is likely due to the response content-type which is text/plain. If you need a JSON response content-type use the getRawEmailJson endpoint
  # @param ID! emailId ID of email
  # @return [String!]
  GetRawEmailContents(emailId: ID!): String!

  # Get raw email in JSON
  # Returns a raw, unparsed, and unprocessed email wrapped in a JSON response object for easier handling when compared with the getRawEmail text/plain response
  # @param ID! emailId ID of email
  # @return [RawEmailJson]
  GetRawEmailJson(emailId: ID!): RawEmailJson

  # Get unread email count
  # Get number of emails unread
  # @return [UnreadCount]
  GetUnreadEmailCount(): UnreadCount

}

