# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
# The version of the OpenAPI document: 6.5.2
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

# package mailslurp

# group_controller_api

type mutation {
  # Add contacts to a group
  # @param ID! groupId groupId
  # @param UpdateGroupContacts updateGroupContactsOption updateGroupContactsOption
  # @return [GroupContactsDto]
  AddContactsToGroup(groupId: ID!, updateGroupContactsOption: UpdateGroupContacts): GroupContactsDto

  # Create a group
  # @param CreateGroupOptions createGroupOptions createGroupOptions
  # @return [GroupDto]
  CreateGroup(createGroupOptions: CreateGroupOptions): GroupDto

  # Delete group
  # @param ID! groupId groupId
  # @return [null]
  DeleteGroup(groupId: ID!): null

  # Remove contacts from a group
  # @param ID! groupId groupId
  # @param UpdateGroupContacts updateGroupContactsOption updateGroupContactsOption
  # @return [GroupContactsDto]
  RemoveContactsFromGroup(groupId: ID!, updateGroupContactsOption: UpdateGroupContacts): GroupContactsDto

}

type query {
  # Get all Contact Groups in paginated format
  # @param Int! page Optional page index in list pagination
  # @param Int! size Optional page size in list pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @return [PageGroupProjection]
  GetAllGroups(page: Int!, size: Int!, sort: String!): PageGroupProjection

  # Get group
  # @param ID! groupId groupId
  # @return [GroupDto]
  GetGroup(groupId: ID!): GroupDto

  # Get group and contacts belonging to it
  # @param ID! groupId groupId
  # @return [GroupContactsDto]
  GetGroupWithContacts(groupId: ID!): GroupContactsDto

  # Get group and paginated contacts belonging to it
  # @param ID! groupId groupId
  # @param Int! page Optional page index in group contact pagination
  # @param Int! size Optional page size in group contact pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @return [PageContactProjection]
  GetGroupWithContactsPaginated(groupId: ID!, page: Int!, size: Int!, sort: String!): PageContactProjection

  # Get all groups
  # @return [[GroupProjection]]
  GetGroups(): [GroupProjection]

}

