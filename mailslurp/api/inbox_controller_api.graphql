# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# The version of the OpenAPI document: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

# package mailslurp

# inbox_controller_api

type mutation {
  # Cancel a scheduled email job
  # Get a scheduled email job and cancel it. Will fail if status of job is already cancelled, failed, or complete.
  # @param ID! jobId 
  # @return [ScheduledJobDto]
  CancelScheduledJob(jobId: ID!): ScheduledJobDto

  # Create an inbox email address. An inbox has a real email address and can send and receive emails. Inboxes can be either &#x60;SMTP&#x60; or &#x60;HTTP&#x60; inboxes.
  # Create a new inbox and with a randomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
  # @param String! emailAddress A custom email address to use with the inbox. Defaults to null. When null MailSlurp will assign a random email address to the inbox such as &#x60;123@mailslurp.com&#x60;. If you use the &#x60;useDomainPool&#x60; option when the email address is null it will generate an email address with a more varied domain ending such as &#x60;123@mailslurp.info&#x60; or &#x60;123@mailslurp.biz&#x60;. When a custom email address is provided the address is split into a domain and the domain is queried against your user. If you have created the domain in the MailSlurp dashboard and verified it you can use any email address that ends with the domain. Note domain types must match the inbox type - so &#x60;SMTP&#x60; inboxes will only work with &#x60;SMTP&#x60; type domains. Avoid &#x60;SMTP&#x60; inboxes if you need to send emails as they can only receive. Send an email to this address and the inbox will receive and store it for you. To retrieve the email use the Inbox and Email Controller endpoints with the inbox ID.
  # @param [String!] tags Tags that inbox has been tagged with. Tags can be added to inboxes to group different inboxes within an account. You can also search for inboxes by tag in the dashboard UI.
  # @param String! name Optional name of the inbox. Displayed in the dashboard for easier search and used as the sender name when sending emails.
  # @param String! description Optional description of the inbox for labelling purposes. Is shown in the dashboard and can be used with
  # @param Boolean! useDomainPool Use the MailSlurp domain name pool with this inbox when creating the email address. Defaults to null. If enabled the inbox will be an email address with a domain randomly chosen from a list of the MailSlurp domains. This is useful when the default &#x60;@mailslurp.com&#x60; email addresses used with inboxes are blocked or considered spam by a provider or receiving service. When domain pool is enabled an email address will be generated ending in &#x60;@mailslurp.{world,info,xyz,...}&#x60; . This means a TLD is randomly selecting from a list of &#x60;.biz&#x60;, &#x60;.info&#x60;, &#x60;.xyz&#x60; etc to add variance to the generated email addresses. When null or false MailSlurp uses the default behavior of &#x60;@mailslurp.com&#x60; or custom email address provided by the emailAddress field. Note this feature is only available for &#x60;HTTP&#x60; inbox types.
  # @param Boolean! favourite Is the inbox a favorite. Marking an inbox as a favorite is typically done in the dashboard for quick access or filtering
  # @param String! expiresAt Optional inbox expiration date. If null then this inbox is permanent and the emails in it won&#39;t be deleted. If an expiration date is provided or is required by your plan the inbox will be closed when the expiration time is reached. Expired inboxes still contain their emails but can no longer send or receive emails. An ExpiredInboxRecord is created when an inbox and the email address and inbox ID are recorded. The expiresAt property is a timestamp string in ISO DateTime Format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSXXX.
  # @param Int! expiresIn Number of milliseconds that inbox should exist for
  # @param Boolean! allowTeamAccess DEPRECATED (team access is always true). Grant team access to this inbox and the emails that belong to it for team members of your organization.
  # @param String! inboxType HTTP (default) or SMTP inbox type. HTTP inboxes are default and best solution for most cases. SMTP inboxes are more reliable for public inbound email consumption (but do not support sending emails). When using custom domains the domain type must match the inbox type. HTTP inboxes are processed by AWS SES while SMTP inboxes use a custom mail server running at &#x60;mx.mailslurp.com&#x60;.
  # @param Boolean! virtualInbox Virtual inbox prevents any outbound emails from being sent. It creates sent email records but will never send real emails to recipients. Great for testing and faking email sending.
  # @param Boolean! useShortAddress Use a shorter email address under 31 characters
  # @param ID! domainId ID of custom domain to use for email address.
  # @param String! domainName FQDN domain name for the domain you have verified. Will be appended with a randomly assigned recipient name. Use the &#x60;emailAddress&#x60; option instead to specify the full custom inbox.
  # @param String! prefix Prefix to add before the email address for easier labelling or identification.
  # @return [InboxDto]
  CreateInbox(emailAddress: String!, tags: [String!], name: String!, description: String!, useDomainPool: Boolean!, favourite: Boolean!, expiresAt: String!, expiresIn: Int!, allowTeamAccess: Boolean!, inboxType: String!, virtualInbox: Boolean!, useShortAddress: Boolean!, domainId: ID!, domainName: String!, prefix: String!): InboxDto

  # Create an inbox ruleset
  # Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
  # @param ID! inboxId inboxId
  # @param CreateInboxRulesetOptions createInboxRulesetOptions 
  # @return [InboxRulesetDto]
  CreateInboxRuleset(inboxId: ID!, createInboxRulesetOptions: CreateInboxRulesetOptions): InboxRulesetDto

  # Create an inbox with default options. Uses MailSlurp domain pool address and is private.
  # @return [InboxDto]
  CreateInboxWithDefaults(): InboxDto

  # Create an inbox with options. Extended options for inbox creation.
  # Additional endpoint that allows inbox creation with request body options. Can be more flexible that other methods for some clients.
  # @param CreateInboxDto createInboxDto 
  # @return [InboxDto]
  CreateInboxWithOptions(createInboxDto: CreateInboxDto): InboxDto

  # Delete all emails in a given inboxes.
  # Deletes all emails in an inbox. Be careful as emails cannot be recovered
  # @param ID! inboxId 
  # @return [null]
  DeleteAllInboxEmails(inboxId: ID!): null

  # Delete all inboxes
  # Permanently delete all inboxes and associated email addresses. This will also delete all emails within the inboxes. Be careful as inboxes cannot be recovered once deleted. Note: deleting inboxes will not impact your usage limits. Monthly inbox creation limits are based on how many inboxes were created in the last 30 days, not how many inboxes you currently have.
  # @return [null]
  DeleteAllInboxes(): null

  # Delete inboxes by description
  # Permanently delete all inboxes by description
  # @param String! description 
  # @return [null]
  DeleteAllInboxesByDescription(description: String!): null

  # Delete inboxes by name
  # Permanently delete all inboxes by name
  # @param String! name 
  # @return [null]
  DeleteAllInboxesByName(name: String!): null

  # Delete inboxes by tag
  # Permanently delete all inboxes by tag
  # @param String! tag 
  # @return [null]
  DeleteAllInboxesByTag(tag: String!): null

  # Delete inbox
  # Permanently delete an inbox and associated email address as well as all emails within the given inbox. This action cannot be undone. Note: deleting an inbox will not affect your account usage. Monthly inbox usage is based on how many inboxes you create within 30 days, not how many exist at time of request.
  # @param ID! inboxId 
  # @return [null]
  DeleteInbox(inboxId: ID!): null

  # Remove expired inboxes
  # Remove any expired inboxes for your account (instead of waiting for scheduled removal on server)
  # @param String! before Optional expired at before flag to flush expired inboxes that have expired before the given time
  # @return [FlushExpiredInboxesResult]
  FlushExpired(before: String!): FlushExpiredInboxesResult

  # Send Email
  # Send an email from an inbox&#39;s email address.  The request body should contain the &#x60;SendEmailOptions&#x60; that include recipients, attachments, body etc. See &#x60;SendEmailOptions&#x60; for all available properties. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id not the inbox&#39;s email address. See https://www.mailslurp.com/guides/ for more information on how to send emails. This method does not return a sent email entity due to legacy reasons. To send and get a sent email as returned response use the sister method &#x60;sendEmailAndConfirm&#x60;.
  # @param ID! inboxId ID of the inbox you want to send the email from
  # @param SendEmailOptions sendEmailOptions 
  # @return [null]
  SendEmail(inboxId: ID!, sendEmailOptions: SendEmailOptions): null

  # Send email and return sent confirmation
  # Sister method for standard &#x60;sendEmail&#x60; method with the benefit of returning a &#x60;SentEmail&#x60; entity confirming the successful sending of the email with a link to the sent object created for it.
  # @param ID! inboxId ID of the inbox you want to send the email from
  # @param SendEmailOptions sendEmailOptions 
  # @return [SentEmailDto]
  SendEmailAndConfirm(inboxId: ID!, sendEmailOptions: SendEmailOptions): SentEmailDto

  # Send email with queue
  # Send an email using a queue. Will place the email onto a queue that will then be processed and sent. Use this queue method to enable any failed email sending to be recovered. This will prevent lost emails when sending if your account encounters a block or payment issue.
  # @param ID! inboxId ID of the inbox you want to send the email from
  # @param Boolean! validateBeforeEnqueue Validate before adding to queue
  # @param SendEmailOptions sendEmailOptions 
  # @return [null]
  SendEmailWithQueue(inboxId: ID!, validateBeforeEnqueue: Boolean!, sendEmailOptions: SendEmailOptions): null

  # Send email using an SMTP mail envelope and message body and return sent confirmation
  # Send email using an SMTP envelope containing RCPT TO, MAIL FROM, and a SMTP BODY.
  # @param ID! inboxId ID of the inbox you want to send the email from
  # @param SendSmtpEnvelopeOptions sendSmtpEnvelopeOptions 
  # @return [SentEmailDto]
  SendSmtpEnvelope(inboxId: ID!, sendSmtpEnvelopeOptions: SendSmtpEnvelopeOptions): SentEmailDto

  # Send a test email to inbox
  # Send an inbox a test email to test email receiving is working
  # @param ID! inboxId 
  # @return [null]
  SendTestEmail(inboxId: ID!): null

  # Send email with with delay or schedule
  # Send an email using a delay. Will place the email onto a scheduler that will then be processed and sent. Use delays to schedule email sending.
  # @param ID! inboxId ID of the inbox you want to send the email from
  # @param SendEmailOptions sendEmailOptions 
  # @param String! sendAtTimestamp Sending timestamp
  # @param Int! sendAtNowPlusSeconds Send after n seconds
  # @param Boolean! validateBeforeEnqueue Validate before adding to queue
  # @return [ScheduledJobDto]
  SendWithSchedule(inboxId: ID!, sendEmailOptions: SendEmailOptions, sendAtTimestamp: String!, sendAtNowPlusSeconds: Int!, validateBeforeEnqueue: Boolean!): ScheduledJobDto

  # Set inbox favourited state
  # Set and return new favourite state for an inbox
  # @param ID! inboxId ID of inbox to set favourite state
  # @param SetInboxFavouritedOptions setInboxFavouritedOptions 
  # @return [InboxDto]
  SetInboxFavourited(inboxId: ID!, setInboxFavouritedOptions: SetInboxFavouritedOptions): InboxDto

  # Update Inbox. Change name and description. Email address is not editable.
  # Update editable fields on an inbox
  # @param ID! inboxId 
  # @param UpdateInboxOptions updateInboxOptions 
  # @return [InboxDto]
  UpdateInbox(inboxId: ID!, updateInboxOptions: UpdateInboxOptions): InboxDto

}

type query {
  # Does inbox exist
  # Check if inboxes exist by email address. Useful if you are sending emails to mailslurp addresses
  # @param String! emailAddress Email address
  # @param Boolean! allowCatchAll 
  # @return [InboxExistsDto]
  DoesInboxExist(emailAddress: String!, allowCatchAll: Boolean!): InboxExistsDto

  # List All Inboxes Paginated
  # List inboxes in paginated form. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative &#x60;getInboxes&#x60; method returns a full list of inboxes but is limited to 100 results.
  # @param Int! page Optional page index in list pagination
  # @param Int! size Optional page size in list pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param Boolean! favourite Optionally filter results for favourites only
  # @param String! search Optionally filter by search words partial matching ID, tags, name, and email address
  # @param String! tag Optionally filter by tags. Will return inboxes that include given tags
  # @param Boolean! teamAccess DEPRECATED. Optionally filter by team access.
  # @param String! since Optional filter by created after given date time
  # @param String! before Optional filter by created before given date time
  # @param String! inboxType Optional filter by inbox type
  # @param String! inboxFunction Optional filter by inbox function
  # @param ID! domainId Optional domain ID filter
  # @return [PageInboxProjection]
  GetAllInboxes(page: Int!, size: Int!, sort: String!, favourite: Boolean!, search: String!, tag: String!, teamAccess: Boolean!, since: String!, before: String!, inboxType: String!, inboxFunction: String!, domainId: ID!): PageInboxProjection

  # List All Inboxes Offset Paginated
  # List inboxes in paginated form. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative &#x60;getInboxes&#x60; method returns a full list of inboxes but is limited to 100 results.
  # @param Int! page Optional page index in list pagination
  # @param Int! size Optional page size in list pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param Boolean! favourite Optionally filter results for favourites only
  # @param String! search Optionally filter by search words partial matching ID, tags, name, and email address
  # @param String! tag Optionally filter by tags. Will return inboxes that include given tags
  # @param Boolean! teamAccess DEPRECATED. Optionally filter by team access.
  # @param String! since Optional filter by created after given date time
  # @param String! before Optional filter by created before given date time
  # @param String! inboxType Optional filter by inbox type
  # @param String! inboxFunction Optional filter by inbox function
  # @param ID! domainId Optional domain ID filter
  # @return [PageInboxProjection]
  GetAllInboxesOffsetPaginated(page: Int!, size: Int!, sort: String!, favourite: Boolean!, search: String!, tag: String!, teamAccess: Boolean!, since: String!, before: String!, inboxType: String!, inboxFunction: String!, domainId: ID!): PageInboxProjection

  # Get all scheduled email sending jobs for account
  # Schedule sending of emails using scheduled jobs. These can be inbox or account level.
  # @param Int! page Optional page index in scheduled job list pagination
  # @param Int! size Optional page size in scheduled job list pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param String! since Filter by created at after the given timestamp
  # @param String! before Filter by created at before the given timestamp
  # @return [PageScheduledJobs]
  GetAllScheduledJobs(page: Int!, size: Int!, sort: String!, since: String!, before: String!): PageScheduledJobs

  # Get all email delivery statuses for an inbox
  # @param ID! inboxId 
  # @param Int! page Optional page index in delivery status list pagination
  # @param Int! size Optional page size in delivery status list pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param String! since Filter by created at after the given timestamp
  # @param String! before Filter by created at before the given timestamp
  # @return [PageDeliveryStatus]
  GetDeliveryStatusesByInboxId(inboxId: ID!, page: Int!, size: Int!, sort: String!, since: String!, before: String!): PageDeliveryStatus

  # Get emails in an Inbox. This method is not idempotent as it allows retries and waits if you want certain conditions to be met before returning. For simple listing and sorting of known emails use the email controller instead.
  # List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
  # @param ID! inboxId Id of inbox that emails belongs to
  # @param Int! size Alias for limit. Assessed first before assessing any passed limit.
  # @param Int! limit Limit the result set, ordered by received date time sort direction. Maximum 100. For more listing options see the email controller
  # @param String! sort Sort the results by received date and direction ASC or DESC
  # @param Int! retryTimeout Maximum milliseconds to spend retrying inbox database until minCount emails are returned
  # @param Int! delayTimeout 
  # @param Int! minCount Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached.
  # @param Boolean! unreadOnly 
  # @param String! before Exclude emails received after this ISO 8601 date time
  # @param String! since Exclude emails received before this ISO 8601 date time
  # @return [[EmailPreview]]
  GetEmails(inboxId: ID!, size: Int!, limit: Int!, sort: String!, retryTimeout: Int!, delayTimeout: Int!, minCount: Int!, unreadOnly: Boolean!, before: String!, since: String!): [EmailPreview]

  # Get IMAP and SMTP access usernames and passwords
  # @param ID! inboxId Inbox ID
  # @return [ImapSmtpAccessDetails]
  GetImapSmtpAccess(inboxId: ID!): ImapSmtpAccessDetails

  # Get Inbox. Returns properties of an inbox.
  # Returns an inbox&#39;s properties, including its email address and ID.
  # @param ID! inboxId 
  # @return [InboxDto]
  GetInbox(inboxId: ID!): InboxDto

  # Search for an inbox with the provided email address
  # Get a inbox result by email address
  # @param String! emailAddress 
  # @return [InboxByEmailAddressResult]
  GetInboxByEmailAddress(emailAddress: String!): InboxByEmailAddressResult

  # Search for an inbox with the given name
  # Get a inbox result by name
  # @param String! name 
  # @return [InboxByNameResult]
  GetInboxByName(name: String!): InboxByNameResult

  # Get total inbox count
  # @return [CountDto]
  GetInboxCount(): CountDto

  # Get email count in inbox
  # @param ID! inboxId Id of inbox that emails belongs to
  # @return [CountDto]
  GetInboxEmailCount(inboxId: ID!): CountDto

  # Get inbox emails paginated
  # Get a paginated list of emails in an inbox. Does not hold connections open.
  # @param ID! inboxId Id of inbox that emails belongs to
  # @param Int! page Optional page index in inbox emails list pagination
  # @param Int! size Optional page size in inbox emails list pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param String! since Optional filter by received after given date time
  # @param String! before Optional filter by received before given date time
  # @return [PageEmailPreview]
  GetInboxEmailsPaginated(inboxId: ID!, page: Int!, size: Int!, sort: String!, since: String!, before: String!): PageEmailPreview

  # Get all inbox IDs
  # Get list of inbox IDs
  # @return [InboxIdsResult]
  GetInboxIds(): InboxIdsResult

  # Get Inbox Sent Emails
  # Returns an inbox&#39;s sent email receipts. Call individual sent email endpoints for more details. Note for privacy reasons the full body of sent emails is never stored. An MD5 hash hex is available for comparison instead.
  # @param ID! inboxId 
  # @param Int! page Optional page index in inbox sent email list pagination
  # @param Int! size Optional page size in inbox sent email list pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param String! searchFilter Optional sent email search
  # @param String! since Optional filter by sent after given date time
  # @param String! before Optional filter by sent before given date time
  # @return [PageSentEmailProjection]
  GetInboxSentEmails(inboxId: ID!, page: Int!, size: Int!, sort: String!, searchFilter: String!, since: String!, before: String!): PageSentEmailProjection

  # Get inbox tags
  # Get all inbox tags
  # @return [[String!]]
  GetInboxTags(): [String!]

  # List Inboxes and email addresses
  # List the inboxes you have created. Note use of the more advanced &#x60;getAllInboxes&#x60; is recommended and allows paginated access using a limit and sort parameter.
  # @param Int! size Optional result size limit. Note an automatic limit of 100 results is applied. See the paginated &#x60;getAllEmails&#x60; for larger queries.
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param String! since Optional filter by created after given date time
  # @param Boolean! excludeCatchAllInboxes Optional exclude catch all inboxes
  # @param String! before Optional filter by created before given date time
  # @return [[InboxDto]]
  GetInboxes(size: Int!, sort: String!, since: String!, excludeCatchAllInboxes: Boolean!, before: String!): [InboxDto]

  # Get latest email in an inbox. Use &#x60;WaitForController&#x60; to get emails that may not have arrived yet.
  # Get the newest email in an inbox or wait for one to arrive
  # @param ID! inboxId ID of the inbox you want to get the latest email from
  # @param Int! timeoutMillis Timeout milliseconds to wait for latest email
  # @return [Email]
  GetLatestEmailInInbox(inboxId: ID!, timeoutMillis: Int!): Email

  # List Organization Inboxes Paginated
  # List organization inboxes in paginated form. These are inboxes created with &#x60;allowTeamAccess&#x60; flag enabled. Organization inboxes are &#x60;readOnly&#x60; for non-admin users. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). 
  # @param Int! page Optional page index in list pagination
  # @param Int! size Optional page size in list pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param String! searchFilter Optional search filter
  # @param String! since Optional filter by created after given date time
  # @param String! before Optional filter by created before given date time
  # @return [PageOrganizationInboxProjection]
  GetOrganizationInboxes(page: Int!, size: Int!, sort: String!, searchFilter: String!, since: String!, before: String!): PageOrganizationInboxProjection

  # Get a scheduled email job
  # Get a scheduled email job details.
  # @param ID! jobId 
  # @return [ScheduledJobDto]
  GetScheduledJob(jobId: ID!): ScheduledJobDto

  # Get all scheduled email sending jobs for the inbox
  # Schedule sending of emails using scheduled jobs.
  # @param ID! inboxId 
  # @param Int! page Optional page index in scheduled job list pagination
  # @param Int! size Optional page size in scheduled job list pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param String! since Filter by created at after the given timestamp
  # @param String! before Filter by created at before the given timestamp
  # @return [PageScheduledJobs]
  GetScheduledJobsByInboxId(inboxId: ID!, page: Int!, size: Int!, sort: String!, since: String!, before: String!): PageScheduledJobs

  # List inbox rulesets
  # List all rulesets attached to an inbox
  # @param ID! inboxId 
  # @param Int! page Optional page index in inbox ruleset list pagination
  # @param Int! size Optional page size in inbox ruleset list pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param String! searchFilter Optional search filter
  # @param String! since Optional filter by created after given date time
  # @param String! before Optional filter by created before given date time
  # @return [PageInboxRulesetDto]
  ListInboxRulesets(inboxId: ID!, page: Int!, size: Int!, sort: String!, searchFilter: String!, since: String!, before: String!): PageInboxRulesetDto

  # List inbox tracking pixels
  # List all tracking pixels sent from an inbox
  # @param ID! inboxId 
  # @param Int! page Optional page index in inbox tracking pixel list pagination
  # @param Int! size Optional page size in inbox tracking pixel list pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param String! searchFilter Optional search filter
  # @param String! since Optional filter by created after given date time
  # @param String! before Optional filter by created before given date time
  # @return [PageTrackingPixelProjection]
  ListInboxTrackingPixels(inboxId: ID!, page: Int!, size: Int!, sort: String!, searchFilter: String!, since: String!, before: String!): PageTrackingPixelProjection

}

