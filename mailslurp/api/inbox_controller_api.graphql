# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
# The version of the OpenAPI document: 6.5.2
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

# package mailslurp

# inbox_controller_api

type mutation {
  # Create an inbox email address. An inbox has a real email address and can send and receive emails. Inboxes can be either &#x60;SMTP&#x60; or &#x60;HTTP&#x60; inboxes.
  # Create a new inbox and with a randomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
  # @param String! aCustomEmailAddressToUseWithTheInboxDefaultsToNullWhenNullMailSlurpWillAssignARandomEmailAddressToTheInboxSuchAs123mailslurpComIfYouUseTheUseDomainPoolOptionWhenTheEmailAddressIsNullItWillGenerateAnEmailAddressWithAMoreVariedDomainEndingSuchAs123mailslurpInfoOr123mailslurpBizWhenACustomEmailAddressIsProvidedTheAddressIsSplitIntoADomainAndTheDomainIsQueriedAgainstYourUserIfYouHaveCreatedTheDomainInTheMailSlurpDashboardAndVerifiedItYouCanUseAnyEmailAddressThatEndsWithTheDomainNoteDomainTypesMustMatchTheInboxTypeSoSMTPInboxesWillOnlyWorkWithSMTPTypeDomainsAvoidSMTPInboxesIfYouNeedToSendEmailsAsTheyCanOnlyReceiveSendAnEmailToThisAddressAndTheInboxWillReceiveAndStoreItForYouToRetrieveTheEmailUseTheInboxAndEmailControllerEndpointsWithTheInboxID 
  # @param [String!] tagsThatInboxHasBeenTaggedWithTagsCanBeAddedToInboxesToGroupDifferentInboxesWithinAnAccountYouCanAlsoSearchForInboxesByTagInTheDashboardUI 
  # @param String! optionalNameOfTheInboxDisplayedInTheDashboardForEasierSearchAndUsedAsTheSenderNameWhenSendingEmails 
  # @param String! optionalDescriptionOfTheInboxForLabellingPurposesIsShownInTheDashboardAndCanBeUsedWith 
  # @param Boolean! useTheMailSlurpDomainNamePoolWithThisInboxWhenCreatingTheEmailAddressDefaultsToNullIfEnabledTheInboxWillBeAnEmailAddressWithADomainRandomlyChosenFromAListOfTheMailSlurpDomainsThisIsUsefulWhenTheDefaultMailslurpComEmailAddressesUsedWithInboxesAreBlockedOrConsideredSpamByAProviderOrReceivingServiceWhenDomainPoolIsEnabledAnEmailAddressWillBeGeneratedEndingInMailslurpWorldinfoxyzThisMeansATLDIsRandomlySelectingFromAListOfBizInfoXyzEtcToAddVarianceToTheGeneratedEmailAddressesWhenNullOrFalseMailSlurpUsesTheDefaultBehaviorOfMailslurpComOrCustomEmailAddressProvidedByTheEmailAddressFieldNoteThisFeatureIsOnlyAvailableForHTTPInboxTypes 
  # @param Boolean! isTheInboxAFavoriteMarkingAnInboxAsAFavoriteIsTypicallyDoneInTheDashboardForQuickAccessOrFiltering 
  # @param String! optionalInboxExpirationDateIfNullThenThisInboxIsPermanentAndTheEmailsInItWontBeDeletedIfAnExpirationDateIsProvidedOrIsRequiredByYourPlanTheInboxWillBeClosedWhenTheExpirationTimeIsReachedExpiredInboxesStillContainTheirEmailsButCanNoLongerSendOrReceiveEmailsAnExpiredInboxRecordIsCreatedWhenAnInboxAndTheEmailAddressAndInboxIDAreRecordedTheExpiresAtPropertyIsATimestampStringInISODateTimeFormatYyyyMMDdTHHmmssSSSXXX 
  # @param Int! numberOfMillisecondsThatInboxShouldExistFor 
  # @param Boolean! dEPRECATEDTeamAccessIsAlwaysTrueGrantTeamAccessToThisInboxAndTheEmailsThatBelongToItForTeamMembersOfYourOrganization 
  # @param String! hTTPDefaultOrSMTPInboxTypeHTTPInboxesAreDefaultAndBestSolutionForMostCasesSMTPInboxesAreMoreReliableForPublicInboundEmailConsumptionButDoNotSupportSendingEmailsWhenUsingCustomDomainsTheDomainTypeMustMatchTheInboxTypeHTTPInboxesAreProcessedByAWSSESWhileSMTPInboxesUseACustomMailServerRunningAtMxMailslurpCom 
  # @return [InboxDto]
  CreateInbox(aCustomEmailAddressToUseWithTheInboxDefaultsToNullWhenNullMailSlurpWillAssignARandomEmailAddressToTheInboxSuchAs123mailslurpComIfYouUseTheUseDomainPoolOptionWhenTheEmailAddressIsNullItWillGenerateAnEmailAddressWithAMoreVariedDomainEndingSuchAs123mailslurpInfoOr123mailslurpBizWhenACustomEmailAddressIsProvidedTheAddressIsSplitIntoADomainAndTheDomainIsQueriedAgainstYourUserIfYouHaveCreatedTheDomainInTheMailSlurpDashboardAndVerifiedItYouCanUseAnyEmailAddressThatEndsWithTheDomainNoteDomainTypesMustMatchTheInboxTypeSoSMTPInboxesWillOnlyWorkWithSMTPTypeDomainsAvoidSMTPInboxesIfYouNeedToSendEmailsAsTheyCanOnlyReceiveSendAnEmailToThisAddressAndTheInboxWillReceiveAndStoreItForYouToRetrieveTheEmailUseTheInboxAndEmailControllerEndpointsWithTheInboxID: String!, tagsThatInboxHasBeenTaggedWithTagsCanBeAddedToInboxesToGroupDifferentInboxesWithinAnAccountYouCanAlsoSearchForInboxesByTagInTheDashboardUI: [String!], optionalNameOfTheInboxDisplayedInTheDashboardForEasierSearchAndUsedAsTheSenderNameWhenSendingEmails: String!, optionalDescriptionOfTheInboxForLabellingPurposesIsShownInTheDashboardAndCanBeUsedWith: String!, useTheMailSlurpDomainNamePoolWithThisInboxWhenCreatingTheEmailAddressDefaultsToNullIfEnabledTheInboxWillBeAnEmailAddressWithADomainRandomlyChosenFromAListOfTheMailSlurpDomainsThisIsUsefulWhenTheDefaultMailslurpComEmailAddressesUsedWithInboxesAreBlockedOrConsideredSpamByAProviderOrReceivingServiceWhenDomainPoolIsEnabledAnEmailAddressWillBeGeneratedEndingInMailslurpWorldinfoxyzThisMeansATLDIsRandomlySelectingFromAListOfBizInfoXyzEtcToAddVarianceToTheGeneratedEmailAddressesWhenNullOrFalseMailSlurpUsesTheDefaultBehaviorOfMailslurpComOrCustomEmailAddressProvidedByTheEmailAddressFieldNoteThisFeatureIsOnlyAvailableForHTTPInboxTypes: Boolean!, isTheInboxAFavoriteMarkingAnInboxAsAFavoriteIsTypicallyDoneInTheDashboardForQuickAccessOrFiltering: Boolean!, optionalInboxExpirationDateIfNullThenThisInboxIsPermanentAndTheEmailsInItWontBeDeletedIfAnExpirationDateIsProvidedOrIsRequiredByYourPlanTheInboxWillBeClosedWhenTheExpirationTimeIsReachedExpiredInboxesStillContainTheirEmailsButCanNoLongerSendOrReceiveEmailsAnExpiredInboxRecordIsCreatedWhenAnInboxAndTheEmailAddressAndInboxIDAreRecordedTheExpiresAtPropertyIsATimestampStringInISODateTimeFormatYyyyMMDdTHHmmssSSSXXX: String!, numberOfMillisecondsThatInboxShouldExistFor: Int!, dEPRECATEDTeamAccessIsAlwaysTrueGrantTeamAccessToThisInboxAndTheEmailsThatBelongToItForTeamMembersOfYourOrganization: Boolean!, hTTPDefaultOrSMTPInboxTypeHTTPInboxesAreDefaultAndBestSolutionForMostCasesSMTPInboxesAreMoreReliableForPublicInboundEmailConsumptionButDoNotSupportSendingEmailsWhenUsingCustomDomainsTheDomainTypeMustMatchTheInboxTypeHTTPInboxesAreProcessedByAWSSESWhileSMTPInboxesUseACustomMailServerRunningAtMxMailslurpCom: String!): InboxDto

  # Create an inbox ruleset
  # Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
  # @param ID! inboxId 
  # @param CreateInboxRulesetOptions createInboxRulesetOptions 
  # @return [InboxRulesetDto]
  CreateInboxRuleset(inboxId: ID!, createInboxRulesetOptions: CreateInboxRulesetOptions): InboxRulesetDto

  # Create an inbox with default options. Uses MailSlurp domain pool address and is private.
  # @return [InboxDto]
  CreateInboxWithDefaults(): InboxDto

  # Create an inbox with options. Extended options for inbox creation.
  # Additional endpoint that allows inbox creation with request body options. Can be more flexible that other methods for some clients.
  # @param CreateInboxDto createInboxDto 
  # @return [InboxDto]
  CreateInboxWithOptions(createInboxDto: CreateInboxDto): InboxDto

  # Delete all inboxes
  # Permanently delete all inboxes and associated email addresses. This will also delete all emails within the inboxes. Be careful as inboxes cannot be recovered once deleted. Note: deleting inboxes will not impact your usage limits. Monthly inbox creation limits are based on how many inboxes were created in the last 30 days, not how many inboxes you currently have.
  # @return [null]
  DeleteAllInboxes(): null

  # Delete inbox
  # Permanently delete an inbox and associated email address as well as all emails within the given inbox. This action cannot be undone. Note: deleting an inbox will not affect your account usage. Monthly inbox usage is based on how many inboxes you create within 30 days, not how many exist at time of request.
  # @param ID! inboxId 
  # @return [null]
  DeleteInbox(inboxId: ID!): null

  # Remove expired inboxes
  # Remove any expired inboxes for your account (instead of waiting for scheduled removal on server)
  # @param String! before Optional expired at before flag to flush expired inboxes that have expired before the given time
  # @return [FlushExpiredInboxesResult]
  FlushExpired(before: String!): FlushExpiredInboxesResult

  # Send Email
  # Send an email from an inbox&#39;s email address.  The request body should contain the &#x60;SendEmailOptions&#x60; that include recipients, attachments, body etc. See &#x60;SendEmailOptions&#x60; for all available properties. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id not the inbox&#39;s email address. See https://www.mailslurp.com/guides/ for more information on how to send emails. This method does not return a sent email entity due to legacy reasons. To send and get a sent email as returned response use the sister method &#x60;sendEmailAndConfirm&#x60;.
  # @param ID! iDOfTheInboxYouWantToSendTheEmailFrom 
  # @param SendEmailOptions sendEmailOptions 
  # @return [null]
  SendEmail(iDOfTheInboxYouWantToSendTheEmailFrom: ID!, sendEmailOptions: SendEmailOptions): null

  # Send email and return sent confirmation
  # Sister method for standard &#x60;sendEmail&#x60; method with the benefit of returning a &#x60;SentEmail&#x60; entity confirming the successful sending of the email with a link to the sent object created for it.
  # @param ID! iDOfTheInboxYouWantToSendTheEmailFrom 
  # @param SendEmailOptions sendEmailOptions 
  # @return [SentEmailDto]
  SendEmailAndConfirm(iDOfTheInboxYouWantToSendTheEmailFrom: ID!, sendEmailOptions: SendEmailOptions): SentEmailDto

  # Send a test email to inbox
  # Send an inbox a test email to test email receiving is working
  # @param ID! inboxId 
  # @return [null]
  SendTestEmail(inboxId: ID!): null

  # Set inbox favourited state
  # Set and return new favourite state for an inbox
  # @param ID! inboxId 
  # @param SetInboxFavouritedOptions setInboxFavouritedOptions 
  # @return [InboxDto]
  SetInboxFavourited(inboxId: ID!, setInboxFavouritedOptions: SetInboxFavouritedOptions): InboxDto

  # Update Inbox. Change name and description. Email address is not editable.
  # Update editable fields on an inbox
  # @param ID! inboxId 
  # @param UpdateInboxOptions updateInboxOptions 
  # @return [InboxDto]
  UpdateInbox(inboxId: ID!, updateInboxOptions: UpdateInboxOptions): InboxDto

}

type query {
  # Does inbox exist
  # Check if inboxes exist by email address. Useful if you are sending emails to mailslurp addresses
  # @param String! emailAddress Email address
  # @return [InboxExistsDto]
  DoesInboxExist(emailAddress: String!): InboxExistsDto

  # List All Inboxes Paginated
  # List inboxes in paginated form. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative &#x60;getInboxes&#x60; method returns a full list of inboxes but is limited to 100 results.
  # @param Int! page Optional page index in list pagination
  # @param Int! size Optional page size in list pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param Boolean! favourite Optionally filter results for favourites only
  # @param String! search Optionally filter by search words partial matching ID, tags, name, and email address
  # @param String! tag Optionally filter by tags. Will return inboxes that include given tags
  # @param Boolean! dEPRECATEDOptionallyFilterByTeamAccess 
  # @param String! since Optional filter by created after given date time
  # @param String! before Optional filter by created before given date time
  # @return [PageInboxProjection]
  GetAllInboxes(page: Int!, size: Int!, sort: String!, favourite: Boolean!, search: String!, tag: String!, dEPRECATEDOptionallyFilterByTeamAccess: Boolean!, since: String!, before: String!): PageInboxProjection

  # Get emails in an Inbox. This method is not idempotent as it allows retries and waits if you want certain conditions to be met before returning. For simple listing and sorting of known emails use the email controller instead.
  # List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
  # @param ID! idOfInboxThatEmailsBelongsTo 
  # @param Int! aliasForLimitAssessedFirstBeforeAssessingAnyPassedLimit 
  # @param Int! limit Limit the result set, ordered by received date time sort direction. Maximum 100. For more listing options see the email controller
  # @param String! sortTheResultsByReceivedDateAndDirectionASCOrDESC 
  # @param Int! retryTimeout Maximum milliseconds to spend retrying inbox database until minCount emails are returned
  # @param Int! delayTimeout 
  # @param Int! minCount Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached.
  # @param Boolean! unreadOnly 
  # @param String! excludeEmailsReceivedAfterThisISO8601DateTime 
  # @param String! excludeEmailsReceivedBeforeThisISO8601DateTime 
  # @return [[EmailPreview]]
  GetEmails(idOfInboxThatEmailsBelongsTo: ID!, aliasForLimitAssessedFirstBeforeAssessingAnyPassedLimit: Int!, limit: Int!, sortTheResultsByReceivedDateAndDirectionASCOrDESC: String!, retryTimeout: Int!, delayTimeout: Int!, minCount: Int!, unreadOnly: Boolean!, excludeEmailsReceivedAfterThisISO8601DateTime: String!, excludeEmailsReceivedBeforeThisISO8601DateTime: String!): [EmailPreview]

  # Get Inbox. Returns properties of an inbox.
  # Returns an inbox&#39;s properties, including its email address and ID.
  # @param ID! inboxId 
  # @return [InboxDto]
  GetInbox(inboxId: ID!): InboxDto

  # Get total inbox count
  # @return [CountDto]
  GetInboxCount(): CountDto

  # Get email count in inbox
  # @param ID! idOfInboxThatEmailsBelongsTo 
  # @return [CountDto]
  GetInboxEmailCount(idOfInboxThatEmailsBelongsTo: ID!): CountDto

  # Get inbox emails paginated
  # Get a paginated list of emails in an inbox. Does not hold connections open.
  # @param ID! idOfInboxThatEmailsBelongsTo 
  # @param Int! page Optional page index in inbox emails list pagination
  # @param Int! size Optional page size in inbox emails list pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param String! since Optional filter by received after given date time
  # @param String! before Optional filter by received before given date time
  # @return [PageEmailPreview]
  GetInboxEmailsPaginated(idOfInboxThatEmailsBelongsTo: ID!, page: Int!, size: Int!, sort: String!, since: String!, before: String!): PageEmailPreview

  # Get Inbox Sent Emails
  # Returns an inbox&#39;s sent email receipts. Call individual sent email endpoints for more details. Note for privacy reasons the full body of sent emails is never stored. An MD5 hash hex is available for comparison instead.
  # @param ID! inboxId 
  # @param Int! page Optional page index in inbox sent email list pagination
  # @param Int! optionalPageSizeInInboxSentEmailListPagination 
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param String! searchFilter Optional sent email search
  # @param String! since Optional filter by sent after given date time
  # @param String! before Optional filter by sent before given date time
  # @return [PageSentEmailProjection]
  GetInboxSentEmails(inboxId: ID!, page: Int!, optionalPageSizeInInboxSentEmailListPagination: Int!, sort: String!, searchFilter: String!, since: String!, before: String!): PageSentEmailProjection

  # Get inbox tags
  # Get all inbox tags
  # @return [[String!]]
  GetInboxTags(): [String!]

  # List Inboxes and email addresses
  # List the inboxes you have created. Note use of the more advanced &#x60;getAllEmails&#x60; is recommended and allows paginated access using a limit and sort parameter.
  # @param Int! size Optional result size limit. Note an automatic limit of 100 results is applied. See the paginated &#x60;getAllEmails&#x60; for larger queries.
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param String! since Optional filter by created after given date time
  # @param String! before Optional filter by created before given date time
  # @return [[InboxDto]]
  GetInboxes(size: Int!, sort: String!, since: String!, before: String!): [InboxDto]

  # List Organization Inboxes Paginated
  # List organization inboxes in paginated form. These are inboxes created with &#x60;allowTeamAccess&#x60; flag enabled. Organization inboxes are &#x60;readOnly&#x60; for non-admin users. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). 
  # @param Int! page Optional page index in list pagination
  # @param Int! size Optional page size in list pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param String! searchFilter Optional search filter
  # @param String! since Optional filter by created after given date time
  # @param String! before Optional filter by created before given date time
  # @return [PageOrganizationInboxProjection]
  GetOrganizationInboxes(page: Int!, size: Int!, sort: String!, searchFilter: String!, since: String!, before: String!): PageOrganizationInboxProjection

  # List inbox rulesets
  # List all rulesets attached to an inbox
  # @param ID! inboxId 
  # @param Int! page Optional page index in inbox ruleset list pagination
  # @param Int! size Optional page size in inbox ruleset list pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param String! searchFilter Optional search filter
  # @param String! since Optional filter by created after given date time
  # @param String! before Optional filter by created before given date time
  # @return [PageInboxRulesetDto]
  ListInboxRulesets(inboxId: ID!, page: Int!, size: Int!, sort: String!, searchFilter: String!, since: String!, before: String!): PageInboxRulesetDto

  # List inbox tracking pixels
  # List all tracking pixels sent from an inbox
  # @param ID! inboxId 
  # @param Int! page Optional page index in inbox tracking pixel list pagination
  # @param Int! optionalPageSizeInInboxTrackingPixelListPagination 
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param String! searchFilter Optional search filter
  # @param String! since Optional filter by created after given date time
  # @param String! before Optional filter by created before given date time
  # @return [PageTrackingPixelProjection]
  ListInboxTrackingPixels(inboxId: ID!, page: Int!, optionalPageSizeInInboxTrackingPixelListPagination: Int!, sort: String!, searchFilter: String!, since: String!, before: String!): PageTrackingPixelProjection

}

