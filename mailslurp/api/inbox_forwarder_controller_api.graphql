# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
# The version of the OpenAPI document: 6.5.2
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

# package mailslurp

# inbox_forwarder_controller_api

type mutation {
  # Create an inbox forwarder
  # Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
  # @param CreateInboxForwarderOptions createInboxForwarderOptions createInboxForwarderOptions
  # @param ID! inboxId Inbox id to attach forwarder to
  # @return [InboxForwarderDto]
  CreateNewInboxForwarder(createInboxForwarderOptions: CreateInboxForwarderOptions, inboxId: ID!): InboxForwarderDto

  # Delete an inbox forwarder
  # Delete inbox forwarder
  # @param ID! Id_ ID of inbox forwarder
  # @return [null]
  DeleteInboxForwarder(Id_: ID!): null

  # Delete inbox forwarders
  # Delete inbox forwarders. Accepts optional inboxId filter.
  # @param ID! inboxId Optional inbox id to attach forwarder to
  # @return [null]
  DeleteInboxForwarders(inboxId: ID!): null

  # Test an inbox forwarder
  # Test an inbox forwarder
  # @param ID! Id_ ID of inbox forwarder
  # @param InboxForwarderTestOptions inboxForwarderTestOptions inboxForwarderTestOptions
  # @return [InboxForwarderTestResult]
  TestInboxForwarder(Id_: ID!, inboxForwarderTestOptions: InboxForwarderTestOptions): InboxForwarderTestResult

  # Test inbox forwarders for inbox
  # Test inbox forwarders for inbox
  # @param ID! inboxId ID of inbox
  # @param InboxForwarderTestOptions inboxForwarderTestOptions inboxForwarderTestOptions
  # @return [InboxForwarderTestResult]
  TestInboxForwardersForInbox(inboxId: ID!, inboxForwarderTestOptions: InboxForwarderTestOptions): InboxForwarderTestResult

  # Test new inbox forwarder
  # Test new inbox forwarder
  # @param TestNewInboxForwarderOptions testNewInboxForwarderOptions testNewInboxForwarderOptions
  # @return [InboxForwarderTestResult]
  TestNewInboxForwarder(testNewInboxForwarderOptions: TestNewInboxForwarderOptions): InboxForwarderTestResult

}

type query {
  # Get an inbox forwarder
  # Get inbox ruleset
  # @param ID! Id_ ID of inbox forwarder
  # @return [InboxForwarderDto]
  GetInboxForwarder(Id_: ID!): InboxForwarderDto

  # List inbox forwarders
  # List all forwarders attached to an inbox
  # @param String! before Filter by created at before the given timestamp
  # @param ID! inboxId Optional inbox id to get forwarders from
  # @param Int! page Optional page index in inbox forwarder list pagination
  # @param String! searchFilter Optional search filter
  # @param String! since Filter by created at after the given timestamp
  # @param Int! size Optional page size in inbox forwarder list pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @return [PageInboxForwarderDto]
  GetInboxForwarders(before: String!, inboxId: ID!, page: Int!, searchFilter: String!, since: String!, size: Int!, sort: String!): PageInboxForwarderDto

}

