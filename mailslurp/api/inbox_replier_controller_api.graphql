# MailSlurp API
# MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# The version of the OpenAPI document: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

# package mailslurp

# inbox_replier_controller_api

type mutation {
  # Create an inbox replier
  # Create a new inbox rule for reply toing, blocking, and allowing emails when sending and receiving
  # @param CreateInboxReplierOptions createInboxReplierOptions 
  # @return [InboxReplierDto]
  CreateNewInboxReplier(createInboxReplierOptions: CreateInboxReplierOptions): InboxReplierDto

  # Delete an inbox replier
  # Delete inbox replier
  # @param ID! Id_ ID of inbox replier
  # @return [null]
  DeleteInboxReplier(Id_: ID!): null

  # Delete inbox repliers
  # Delete inbox repliers. Accepts optional inboxId filter.
  # @param ID! inboxId Optional inbox id to attach replier to
  # @return [null]
  DeleteInboxRepliers(inboxId: ID!): null

  # Update an inbox replier
  # Update inbox ruleset
  # @param ID! Id_ ID of inbox replier
  # @param UpdateInboxReplierOptions updateInboxReplierOptions 
  # @return [InboxReplierDto]
  UpdateInboxReplier(Id_: ID!, updateInboxReplierOptions: UpdateInboxReplierOptions): InboxReplierDto

}

type query {
  # Get inbox replier event list
  # Get all inbox ruleset events
  # @param ID! inboxReplierId ID of inbox replier
  # @param ID! inboxId ID of inbox
  # @param ID! emailId ID of email
  # @param ID! sentId ID of sent
  # @param Int! page Optional page index in inbox replier event list pagination
  # @param Int! size Optional page size in inbox replier event list pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @return [PageInboxReplierEvents]
  GetAllInboxReplierEvents(inboxReplierId: ID!, inboxId: ID!, emailId: ID!, sentId: ID!, page: Int!, size: Int!, sort: String!): PageInboxReplierEvents

  # Get an inbox replier
  # Get inbox ruleset
  # @param ID! Id_ ID of inbox replier
  # @return [InboxReplierDto]
  GetInboxReplier(Id_: ID!): InboxReplierDto

  # Get an inbox replier event list
  # Get inbox ruleset events
  # @param ID! Id_ ID of inbox replier
  # @param Int! page Optional page index in inbox replier event list pagination
  # @param Int! size Optional page size in inbox replier event list pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @return [PageInboxReplierEvents]
  GetInboxReplierEvents(Id_: ID!, page: Int!, size: Int!, sort: String!): PageInboxReplierEvents

  # List inbox repliers
  # List all repliers attached to an inbox
  # @param ID! inboxId Optional inbox id to get repliers from
  # @param Int! page Optional page index in inbox replier list pagination
  # @param Int! size Optional page size in inbox replier list pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param String! since Filter by created at after the given timestamp
  # @param String! before Filter by created at before the given timestamp
  # @return [PageInboxReplierDto]
  GetInboxRepliers(inboxId: ID!, page: Int!, size: Int!, sort: String!, since: String!, before: String!): PageInboxReplierDto

}

