# MailSlurp API
# MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# The version of the OpenAPI document: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

# package mailslurp

# phone_controller_api

type mutation {
  # Create an emergency address
  # Add an emergency address to a phone number
  # @param CreateEmergencyAddressOptions createEmergencyAddressOptions 
  # @return [EmergencyAddress]
  CreateEmergencyAddress(createEmergencyAddressOptions: CreateEmergencyAddressOptions): EmergencyAddress

  # Delete an emergency address
  # Delete an emergency address
  # @param ID! addressId 
  # @return [EmptyResponseDto]
  DeleteEmergencyAddress(addressId: ID!): EmptyResponseDto

  # Delete a phone number
  # Remove phone number from account
  # @param ID! phoneNumberId 
  # @return [null]
  DeletePhoneNumber(phoneNumberId: ID!): null

  # Send TXT message from a phone number
  # Send SMS from a phone number
  # @param ID! phoneNumberId 
  # @param SmsSendOptions smsSendOptions 
  # @return [SentSmsDto]
  SendSmsFromPhoneNumber(phoneNumberId: ID!, smsSendOptions: SmsSendOptions): SentSmsDto

  # Set consent status
  # Give or revoke consent for phone usage
  # @param Boolean! agree 
  # @return [ConsentStatusDto]
  SetConsentStatus(agree: Boolean!): ConsentStatusDto

  # Set phone favourited state
  # Set and return new favorite state for a phone
  # @param ID! phoneNumberId ID of phone to set favourite state
  # @param SetPhoneFavouritedOptions setPhoneFavouritedOptions 
  # @return [PhoneNumberDto]
  SetPhoneFavourited(phoneNumberId: ID!, setPhoneFavouritedOptions: SetPhoneFavouritedOptions): PhoneNumberDto

  # Test sending an SMS to a number
  # Test a phone number by sending an SMS to it
  # @param ID! phoneNumberId 
  # @param TestPhoneNumberOptions testPhoneNumberOptions 
  # @param String! xTestId 
  # @return [null]
  TestPhoneNumberSendSms(phoneNumberId: ID!, testPhoneNumberOptions: TestPhoneNumberOptions, xTestId: String!): null

  # Update a phone number
  # Set field for phone number
  # @param ID! phoneNumberId ID of phone to set favourite state
  # @param UpdatePhoneNumberOptions updatePhoneNumberOptions 
  # @return [PhoneNumberDto]
  UpdatePhoneNumber(phoneNumberId: ID!, updatePhoneNumberOptions: UpdatePhoneNumberOptions): PhoneNumberDto

  # Verify validity of a phone number
  # Validate a phone number
  # @param ValidatePhoneNumberOptions validatePhoneNumberOptions 
  # @return [PhoneNumberValidationDto]
  ValidatePhoneNumber(validatePhoneNumberOptions: ValidatePhoneNumberOptions): PhoneNumberValidationDto

}

type query {
  # Get consent status
  # Get the status of phone usage consent
  # @return [ConsentStatusDto]
  GetConsentStatus(): ConsentStatusDto

  # Get an emergency address
  # Fetch an emergency address by ID
  # @param ID! addressId 
  # @return [EmergencyAddress]
  GetEmergencyAddress(addressId: ID!): EmergencyAddress

  # Get emergency addresses
  # List emergency addresses
  # @return [[EmergencyAddressDto]]
  GetEmergencyAddresses(): [EmergencyAddressDto]

  # Get a phone number by ID
  # Get a phone number by ID
  # @param ID! phoneNumberId 
  # @return [PhoneNumberDto]
  GetPhoneNumber(phoneNumberId: ID!): PhoneNumberDto

  # Get phone numbers
  # List phone numbers for account
  # @param String! phoneCountry Optional phone country
  # @param Int! page Optional page index for list pagination
  # @param Int! size Optional page size for list pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param String! since Filter by created at after the given timestamp
  # @param String! before Filter by created at before the given timestamp
  # @param String! search Optional search filter
  # @param [ID!] include Optional phoneIds to include in result
  # @param Boolean! favourite Optionally filter results for favourites only
  # @return [PagePhoneNumberProjection]
  GetPhoneNumbers(phoneCountry: String!, page: Int!, size: Int!, sort: String!, since: String!, before: String!, search: String!, include: [ID!], favourite: Boolean!): PagePhoneNumberProjection

  # Get phone plans
  # Get phone number plans
  # @return [[PhonePlanDto]]
  GetPhonePlans(): [PhonePlanDto]

  # Get phone plans availability
  # @return [PhonePlanAvailability]
  GetPhonePlansAvailability(): PhonePlanAvailability

  # List sent TXT messages for a phone number
  # Get sent SMS messages for a phone number
  # @param ID! phoneNumberId 
  # @param Int! page Optional page index in SMS list pagination
  # @param Int! size Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param String! since Optional filter SMSs received after given date time
  # @param String! before Optional filter SMSs received before given date time
  # @param String! search Optional search filter
  # @return [PageSentSmsProjection]
  GetSentSmsByPhoneNumber(phoneNumberId: ID!, page: Int!, size: Int!, sort: String!, since: String!, before: String!, search: String!): PageSentSmsProjection

  # List SMS messages for a phone number
  # Get SMS messages for a phone number
  # @param ID! phoneNumberId 
  # @param Int! page Optional page index in SMS list pagination
  # @param Int! size Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param Boolean! unreadOnly Optional filter for unread SMS only. All SMS are considered unread until they are viewed in the dashboard or requested directly
  # @param String! since Optional filter SMSs received after given date time
  # @param String! before Optional filter SMSs received before given date time
  # @param String! search Optional search filter
  # @param Boolean! favourite Optionally filter results for favourites only
  # @return [PageSmsProjection]
  GetSmsByPhoneNumber(phoneNumberId: ID!, page: Int!, size: Int!, sort: String!, unreadOnly: Boolean!, since: String!, before: String!, search: String!, favourite: Boolean!): PageSmsProjection

}

