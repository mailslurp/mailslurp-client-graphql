# MailSlurp API
# MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# The version of the OpenAPI document: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

# package mailslurp

# ruleset_controller_api

type mutation {
  # Create a ruleset
  # Create a new inbox or phone number rule for forwarding, blocking, and allowing emails or SMS when sending and receiving
  # @param CreateRulesetOptions createRulesetOptions 
  # @param ID! inboxId Inbox id to attach ruleset to
  # @param ID! phoneId Phone id to attach ruleset to
  # @return [RulesetDto]
  CreateNewRuleset(createRulesetOptions: CreateRulesetOptions, inboxId: ID!, phoneId: ID!): RulesetDto

  # Delete a ruleset
  # Delete ruleset
  # @param ID! Id_ ID of ruleset
  # @return [null]
  DeleteRuleset(Id_: ID!): null

  # Delete rulesets
  # Delete rulesets. Accepts optional inboxId or phoneId filters.
  # @param ID! inboxId Optional inbox id to attach ruleset to
  # @param ID! phoneId 
  # @return [null]
  DeleteRulesets(inboxId: ID!, phoneId: ID!): null

  # Test inbox rulesets for inbox
  # Test inbox rulesets for inbox
  # @param ID! inboxId ID of inbox
  # @param RulesetTestOptions rulesetTestOptions 
  # @return [InboxRulesetTestResult]
  TestInboxRulesetsForInbox(inboxId: ID!, rulesetTestOptions: RulesetTestOptions): InboxRulesetTestResult

  # Test new ruleset
  # Test new ruleset
  # @param TestNewInboxRulesetOptions testNewInboxRulesetOptions 
  # @return [InboxRulesetTestResult]
  TestNewRuleset(testNewInboxRulesetOptions: TestNewInboxRulesetOptions): InboxRulesetTestResult

  # Test a ruleset
  # Test an inbox or phone ruleset
  # @param ID! Id_ ID of ruleset
  # @param RulesetTestOptions rulesetTestOptions 
  # @return [InboxRulesetTestResult]
  TestRuleset(Id_: ID!, rulesetTestOptions: RulesetTestOptions): InboxRulesetTestResult

  # Test receiving with rulesets
  # Test whether inbound emails from an email address would be blocked or allowed by inbox rulesets or test if phone number can receive SMS
  # @param TestRulesetReceivingOptions testRulesetReceivingOptions 
  # @return [TestRulesetReceivingResult]
  TestRulesetReceiving(testRulesetReceivingOptions: TestRulesetReceivingOptions): TestRulesetReceivingResult

  # Test sending with rulesets
  # Test whether outbound emails to an email address would be blocked or allowed by inbox rulesets or whether a phone number can send SMS
  # @param TestInboxRulesetSendingOptions testInboxRulesetSendingOptions 
  # @return [TestRulesetSendingResult]
  TestRulesetSending(testInboxRulesetSendingOptions: TestInboxRulesetSendingOptions): TestRulesetSendingResult

}

type query {
  # Get a ruleset
  # Get ruleset
  # @param ID! Id_ ID of ruleset
  # @return [RulesetDto]
  GetRuleset(Id_: ID!): RulesetDto

  # List rulesets block and allow lists
  # List all rulesets attached to an inbox or phone or account
  # @param ID! inboxId Optional inbox id to get rulesets from
  # @param ID! phoneId Optional phone id to get rulesets from
  # @param Int! page Optional page index in inbox ruleset list pagination
  # @param Int! size Optional page size in inbox ruleset list pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param String! searchFilter Optional search filter
  # @param String! since Filter by created at after the given timestamp
  # @param String! before Filter by created at before the given timestamp
  # @return [PageRulesetDto]
  GetRulesets(inboxId: ID!, phoneId: ID!, page: Int!, size: Int!, sort: String!, searchFilter: String!, since: String!, before: String!): PageRulesetDto

}

