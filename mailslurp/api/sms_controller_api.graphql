# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# The version of the OpenAPI document: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

# package mailslurp

# sms_controller_api

type mutation {
  # Delete SMS message.
  # Delete an SMS message
  # @param ID! smsId 
  # @return [null]
  DeleteSmsMessage(smsId: ID!): null

  # Delete all SMS messages
  # Delete all SMS messages or all messages for a given phone number
  # @param ID! phoneNumberId 
  # @return [null]
  DeleteSmsMessages(phoneNumberId: ID!): null

}

type query {
  # Get SMS content including body. Expects SMS to exist by ID. For SMS that may not have arrived yet use the WaitForController.
  # Returns a SMS summary object with content.
  # @param ID! smsId 
  # @return [SmsDto]
  GetSmsMessage(smsId: ID!): SmsDto

  # Get all SMS messages in all phone numbers in paginated form. .
  # By default returns all SMS messages across all phone numbers sorted by ascending created at date. Responses are paginated. You can restrict results to a list of phone number IDs. You can also filter out read messages
  # @param ID! phoneNumber Optional receiving phone number to filter SMS messages for
  # @param Int! page Optional page index in SMS list pagination
  # @param Int! size Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param Boolean! unreadOnly Optional filter for unread SMS only. All SMS are considered unread until they are viewed in the dashboard or requested directly
  # @param String! since Optional filter SMSs received after given date time
  # @param String! before Optional filter SMSs received before given date time
  # @return [PageSmsProjection]
  GetSmsMessagesPaginated(phoneNumber: ID!, page: Int!, size: Int!, sort: String!, unreadOnly: Boolean!, since: String!, before: String!): PageSmsProjection

}

