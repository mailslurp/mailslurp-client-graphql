# MailSlurp API
# MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# The version of the OpenAPI document: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

# package mailslurp

# sms_controller_api

type mutation {
  # Delete sent SMS message.
  # Delete a sent SMS message
  # @param ID! sentSmsId 
  # @return [null]
  DeleteSentSmsMessage(sentSmsId: ID!): null

  # Delete all sent SMS messages
  # Delete all sent SMS messages or all messages for a given phone number
  # @param ID! phoneNumberId 
  # @return [null]
  DeleteSentSmsMessages(phoneNumberId: ID!): null

  # Delete SMS message.
  # Delete an SMS message
  # @param ID! smsId 
  # @return [null]
  DeleteSmsMessage(smsId: ID!): null

  # Delete all SMS messages
  # Delete all SMS messages or all messages for a given phone number
  # @param ID! phoneNumberId 
  # @return [null]
  DeleteSmsMessages(phoneNumberId: ID!): null

  # Send a reply to a received SMS message. Replies are sent from the receiving number.
  # Reply to an SMS message.
  # @param ID! smsId 
  # @param SmsReplyOptions smsReplyOptions 
  # @return [SentSmsDto]
  ReplyToSmsMessage(smsId: ID!, smsReplyOptions: SmsReplyOptions): SentSmsDto

  # @param SmsSendOptions smsSendOptions 
  # @param String! fromPhoneNumber Phone number to send from in E.164 format
  # @param ID! fromPhoneId Phone number ID to send from in UUID form
  # @return [SentSmsDto]
  SendSms(smsSendOptions: SmsSendOptions, fromPhoneNumber: String!, fromPhoneId: ID!): SentSmsDto

  # @param ID! smsId ID of SMS to set favourite state
  # @param Boolean! favourited 
  # @return [SmsDto]
  SetSmsFavourited(smsId: ID!, favourited: Boolean!): SmsDto

}

type query {
  # @param ID! phoneNumber Optional receiving phone number to filter SMS messages for
  # @param Int! page Optional page index in SMS list pagination
  # @param Int! size Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param String! since Optional filter SMSs received after given date time
  # @param String! before Optional filter SMSs received before given date time
  # @param String! search Optional search filter
  # @param Boolean! favourite Optionally filter results for favourites only
  # @param [ID!] include Optional list of IDs to include in result
  # @return [PageSmsProjection]
  GetAllSmsMessages(phoneNumber: ID!, page: Int!, size: Int!, sort: String!, since: String!, before: String!, search: String!, favourite: Boolean!, include: [ID!]): PageSmsProjection

  # Get reply for an SMS message
  # Get reply for an SMS message.
  # @param ID! smsId 
  # @return [ReplyForSms]
  GetReplyForSmsMessage(smsId: ID!): ReplyForSms

  # Get sent SMS count
  # Get number of sent SMS
  # @return [CountDto]
  GetSentSmsCount(): CountDto

  # Get sent SMS content including body. Expects sent SMS to exist by ID.
  # Returns an SMS summary object with content.
  # @param ID! sentSmsId 
  # @return [SentSmsDto]
  GetSentSmsMessage(sentSmsId: ID!): SentSmsDto

  # Get all SMS messages in all phone numbers in paginated form. .
  # By default returns all SMS messages across all phone numbers sorted by ascending created at date. Responses are paginated. You can restrict results to a list of phone number IDs. You can also filter out read messages
  # @param ID! phoneNumber Optional phone number to filter sent SMS messages for
  # @param Int! page Optional page index in SMS list pagination
  # @param Int! size Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param String! since Optional filter SMSs received after given date time
  # @param String! before Optional filter SMSs received before given date time
  # @param String! search Optional search filter
  # @return [PageSentSmsProjection]
  GetSentSmsMessagesPaginated(phoneNumber: ID!, page: Int!, size: Int!, sort: String!, since: String!, before: String!, search: String!): PageSentSmsProjection

  # Get SMS count
  # Get number of SMS
  # @return [CountDto]
  GetSmsCount(): CountDto

  # Get SMS content including body. Expects SMS to exist by ID. For SMS that may not have arrived yet use the WaitForController.
  # Returns a SMS summary object with content.
  # @param ID! smsId 
  # @return [SmsDto]
  GetSmsMessage(smsId: ID!): SmsDto

  # Get unread SMS count
  # Get number of SMS unread. Unread means has not been viewed in dashboard or returned in an email API response
  # @return [UnreadCount]
  GetUnreadSmsCount(): UnreadCount

}

