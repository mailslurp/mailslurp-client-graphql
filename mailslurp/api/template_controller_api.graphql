# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# The version of the OpenAPI document: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

# package mailslurp

# template_controller_api

type mutation {
  # Create a Template
  # Create an email template with variables for use with templated transactional emails.
  # @param CreateTemplateOptions createTemplateOptions 
  # @return [TemplateDto]
  CreateTemplate(createTemplateOptions: CreateTemplateOptions): TemplateDto

  # Delete email template
  # Delete template
  # @param ID! templateId Template ID
  # @return [null]
  DeleteTemplate(templateId: ID!): null

  # Update template
  # Update email template
  # @param ID! templateId Template ID
  # @param CreateTemplateOptions createTemplateOptions 
  # @return [TemplateDto]
  UpdateTemplate(templateId: ID!, createTemplateOptions: CreateTemplateOptions): TemplateDto

}

type query {
  # List templates
  # Get all templates in paginated format
  # @param Int! page Optional page index in list pagination
  # @param Int! size Optional page size in list pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param String! since Filter by created at after the given timestamp
  # @param String! before Filter by created at before the given timestamp
  # @return [PageTemplateProjection]
  GetAllTemplates(page: Int!, size: Int!, sort: String!, since: String!, before: String!): PageTemplateProjection

  # Get template
  # Get email template
  # @param ID! templateId Template ID
  # @return [TemplateDto]
  GetTemplate(templateId: ID!): TemplateDto

  # List templates
  # Get all templates
  # @return [[TemplateProjection]]
  GetTemplates(): [TemplateProjection]

}

