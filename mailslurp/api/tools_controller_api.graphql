# MailSlurp API
# MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# The version of the OpenAPI document: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

# package mailslurp

# tools_controller_api

type mutation {
  # Check email client support for email HTML and CSS features
  # @param CheckEmailFeaturesClientSupportOptions checkEmailFeaturesClientSupportOptions 
  # @return [CheckEmailFeaturesClientSupportResults]
  CheckEmailFeaturesClientSupport(checkEmailFeaturesClientSupportOptions: CheckEmailFeaturesClientSupportOptions): CheckEmailFeaturesClientSupportResults

  # Create a new email address using the fake email domains
  # @return [NewFakeEmailAddressResult]
  CreateNewFakeEmailAddress(): NewFakeEmailAddressResult

  # Delete a fake email address using the fake email domains
  # Delete a fake email address using the fake email domains
  # @param String! emailAddress 
  # @return [null]
  DeleteNewFakeEmailAddress(emailAddress: String!): null

  # Create a BIMI record policy
  # @param GenerateBimiRecordOptions generateBimiRecordOptions 
  # @return [GenerateBimiRecordResults]
  GenerateBimiRecord(generateBimiRecordOptions: GenerateBimiRecordOptions): GenerateBimiRecordResults

  # Create a DMARC record policy
  # @param GenerateDmarcRecordOptions generateDmarcRecordOptions 
  # @return [GenerateDmarcRecordResults]
  GenerateDmarcRecord(generateDmarcRecordOptions: GenerateDmarcRecordOptions): GenerateDmarcRecordResults

  # Create a TLS reporting record policy
  # @param GenerateMtaStsRecordOptions generateMtaStsRecordOptions 
  # @return [GenerateMtaStsRecordResults]
  GenerateMtaStsRecord(generateMtaStsRecordOptions: GenerateMtaStsRecordOptions): GenerateMtaStsRecordResults

  # Create a TLS reporting record policy
  # @param GenerateTlsReportingRecordOptions generateTlsReportingRecordOptions 
  # @return [GenerateTlsReportingRecordResults]
  GenerateTlsReportingRecord(generateTlsReportingRecordOptions: GenerateTlsReportingRecordOptions): GenerateTlsReportingRecordResults

  # Lookup a BIMI record policy
  # @param LookupBimiDomainOptions lookupBimiDomainOptions 
  # @return [LookupBimiDomainResults]
  LookupBimiDomain(lookupBimiDomainOptions: LookupBimiDomainOptions): LookupBimiDomainResults

  # Lookup a DMARC record policy
  # @param LookupDmarcDomainOptions lookupDmarcDomainOptions 
  # @return [LookupDmarcDomainResults]
  LookupDmarcDomain(lookupDmarcDomainOptions: LookupDmarcDomainOptions): LookupDmarcDomainResults

  # Lookup a MTA-STS domain policy
  # @param LookupMtaStsDomainOptions lookupMtaStsDomainOptions 
  # @return [LookupMtaStsDomainResults]
  LookupMtaStsDomain(lookupMtaStsDomainOptions: LookupMtaStsDomainOptions): LookupMtaStsDomainResults

  # Lookup a MX records for a domain
  # @param LookupMxRecordsOptions lookupMxRecordsOptions 
  # @return [LookupMxRecordsResults]
  LookupMxRecord(lookupMxRecordsOptions: LookupMxRecordsOptions): LookupMxRecordsResults

  # Lookup a TLS reporting domain policy
  # @param LookupTlsReportingDomainOptions lookupTlsReportingDomainOptions 
  # @return [LookupTlsReportingDomainResults]
  LookupTlsReportingDomain(lookupTlsReportingDomainOptions: LookupTlsReportingDomainOptions): LookupTlsReportingDomainResults

}

type query {
  # @param String! emailAddress 
  # @return [FakeEmailResult]
  GetFakeEmailByEmailAddress(emailAddress: String!): FakeEmailResult

  # Get a fake email by its ID
  # Get a fake email by its ID
  # @param ID! Id_ 
  # @return [FakeEmailResult]
  GetFakeEmailById(Id_: ID!): FakeEmailResult

  # Get raw fake email content
  # Retrieve the raw content of a fake email by its ID
  # @param ID! Id_ 
  # @return [String!]
  GetFakeEmailRaw(Id_: ID!): String!

  # Get fake emails for an address
  # Get fake emails for an address
  # @param String! emailAddress 
  # @param Int! page 
  # @return [[FakeEmailPreview]]
  GetFakeEmailsForAddress(emailAddress: String!, page: Int!): [FakeEmailPreview]

}

