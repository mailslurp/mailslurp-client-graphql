# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# The version of the OpenAPI document: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

# package mailslurp

# wait_for_controller_api

type mutation {
  # Wait for an email to match the provided filter conditions such as subject contains keyword.
  # Generic waitFor method that will wait until an inbox meets given conditions or return immediately if already met
  # @param WaitForConditions waitForConditions 
  # @return [[EmailPreview]]
  WaitFor(waitForConditions: WaitForConditions): [EmailPreview]

  # Wait or return list of emails that match simple matching patterns
  # Perform a search of emails in an inbox with the given patterns. If results match expected count then return or else retry the search until results are found or timeout is reached. Match options allow simple CONTAINS or EQUALS filtering on SUBJECT, TO, BCC, CC, and FROM. See the &#x60;MatchOptions&#x60; object for options. An example payload is &#x60;{ matches: [{field: &#39;SUBJECT&#39;,should:&#39;CONTAIN&#39;,value:&#39;needle&#39;}] }&#x60;. You can use an array of matches and they will be applied sequentially to filter out emails. If you want to perform matches and extractions of content using Regex patterns see the EmailController &#x60;getEmailContentMatch&#x60; method.
  # @param ID! inboxId Id of the inbox we are fetching emails from
  # @param Int! count Number of emails to wait for. Must be greater or equal to 1
  # @param MatchOptions matchOptions 
  # @param String! before Filter for emails that were received before the given timestamp
  # @param String! since Filter for emails that were received after the given timestamp
  # @param String! sort Sort direction
  # @param Int! delay Max milliseconds delay between calls
  # @param Int! timeout Max milliseconds to wait
  # @param Boolean! unreadOnly Optional filter for unread only
  # @return [[EmailPreview]]
  WaitForMatchingEmails(inboxId: ID!, count: Int!, matchOptions: MatchOptions, before: String!, since: String!, sort: String!, delay: Int!, timeout: Int!, unreadOnly: Boolean!): [EmailPreview]

  # Wait for or return the first email that matches provided MatchOptions array
  # Perform a search of emails in an inbox with the given patterns. If a result if found then return or else retry the search until a result is found or timeout is reached. Match options allow simple CONTAINS or EQUALS filtering on SUBJECT, TO, BCC, CC, and FROM. See the &#x60;MatchOptions&#x60; object for options. An example payload is &#x60;{ matches: [{field: &#39;SUBJECT&#39;,should:&#39;CONTAIN&#39;,value:&#39;needle&#39;}] }&#x60;. You can use an array of matches and they will be applied sequentially to filter out emails. If you want to perform matches and extractions of content using Regex patterns see the EmailController &#x60;getEmailContentMatch&#x60; method.
  # @param ID! inboxId Id of the inbox we are matching an email for
  # @param MatchOptions matchOptions 
  # @param Int! timeout Max milliseconds to wait
  # @param Boolean! unreadOnly Optional filter for unread only
  # @param String! since Filter for emails that were received after the given timestamp
  # @param String! before Filter for emails that were received before the given timestamp
  # @param String! sort Sort direction
  # @param Int! delay Max milliseconds delay between calls
  # @return [Email]
  WaitForMatchingFirstEmail(inboxId: ID!, matchOptions: MatchOptions, timeout: Int!, unreadOnly: Boolean!, since: String!, before: String!, sort: String!, delay: Int!): Email

  # Wait for an SMS message to match the provided filter conditions such as body contains keyword.
  # Generic waitFor method that will wait until a phone number meets given conditions or return immediately if already met
  # @param WaitForSmsConditions waitForSmsConditions 
  # @return [[SmsPreview]]
  WaitForSms(waitForSmsConditions: WaitForSmsConditions): [SmsPreview]

}

type query {
  # Wait for and return count number of emails. Hold connection until inbox count matches expected or timeout occurs
  # If inbox contains count or more emails at time of request then return count worth of emails. If not wait until the count is reached and return those or return an error if timeout is exceeded.
  # @param ID! inboxId Id of the inbox we are fetching emails from
  # @param Int! count Number of emails to wait for. Must be greater that 1
  # @param Int! timeout Max milliseconds to wait
  # @param Boolean! unreadOnly Optional filter for unread only
  # @param String! before Filter for emails that were received before the given timestamp
  # @param String! since Filter for emails that were received after the given timestamp
  # @param String! sort Sort direction
  # @param Int! delay Max milliseconds delay between calls
  # @return [[EmailPreview]]
  WaitForEmailCount(inboxId: ID!, count: Int!, timeout: Int!, unreadOnly: Boolean!, before: String!, since: String!, sort: String!, delay: Int!): [EmailPreview]

  # Fetch inbox&#39;s latest email or if empty wait for an email to arrive
  # Will return either the last received email or wait for an email to arrive and return that. If you need to wait for an email for a non-empty inbox set &#x60;unreadOnly&#x3D;true&#x60; or see the other receive methods such as &#x60;waitForNthEmail&#x60; or &#x60;waitForEmailCount&#x60;.
  # @param ID! inboxId Id of the inbox we are fetching emails from
  # @param Int! timeout Max milliseconds to wait
  # @param Boolean! unreadOnly Optional filter for unread only.
  # @param String! before Filter for emails that were before after the given timestamp
  # @param String! since Filter for emails that were received after the given timestamp
  # @param String! sort Sort direction
  # @param Int! delay Max milliseconds delay between calls
  # @return [Email]
  WaitForLatestEmail(inboxId: ID!, timeout: Int!, unreadOnly: Boolean!, before: String!, since: String!, sort: String!, delay: Int!): Email

  # Wait for or fetch the email with a given index in the inbox specified. If index doesn&#39;t exist waits for it to exist or timeout to occur.
  # If nth email is already present in inbox then return it. If not hold the connection open until timeout expires or the nth email is received and returned.
  # @param ID! inboxId Id of the inbox you are fetching emails from
  # @param Int! index Zero based index of the email to wait for. If an inbox has 1 email already and you want to wait for the 2nd email pass index&#x3D;1
  # @param Int! timeout Max milliseconds to wait for the nth email if not already present
  # @param Boolean! unreadOnly Optional filter for unread only
  # @param String! since Filter for emails that were received after the given timestamp
  # @param String! before Filter for emails that were received before the given timestamp
  # @param String! sort Sort direction
  # @param Int! delay Max milliseconds delay between calls
  # @return [Email]
  WaitForNthEmail(inboxId: ID!, index: Int!, timeout: Int!, unreadOnly: Boolean!, since: String!, before: String!, sort: String!, delay: Int!): Email

}

