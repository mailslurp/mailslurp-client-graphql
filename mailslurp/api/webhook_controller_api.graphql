# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# The version of the OpenAPI document: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

# package mailslurp

# webhook_controller_api

type mutation {
  # Attach a WebHook URL to an inbox
  # Get notified of account level events such as bounce and bounce recipient.
  # @param CreateWebhookOptions createWebhookOptions 
  # @return [WebhookDto]
  CreateAccountWebhook(createWebhookOptions: CreateWebhookOptions): WebhookDto

  # Attach a WebHook URL to an inbox
  # Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
  # @param ID! inboxId 
  # @param CreateWebhookOptions createWebhookOptions 
  # @return [WebhookDto]
  CreateWebhook(inboxId: ID!, createWebhookOptions: CreateWebhookOptions): WebhookDto

  # Attach a WebHook URL to a phone number
  # Get notified whenever a phone number receives an SMS via a WebHook URL.
  # @param ID! phoneNumberId 
  # @param CreateWebhookOptions createWebhookOptions 
  # @return [WebhookDto]
  CreateWebhookForPhoneNumber(phoneNumberId: ID!, createWebhookOptions: CreateWebhookOptions): WebhookDto

  # Delete all webhooks
  # @param String! before before
  # @return [null]
  DeleteAllWebhooks(before: String!): null

  # Delete and disable a Webhook for an Inbox
  # @param ID! inboxId 
  # @param ID! webhookId 
  # @return [null]
  DeleteWebhook(inboxId: ID!, webhookId: ID!): null

  # Delete a webhook
  # @param ID! webhookId 
  # @return [null]
  DeleteWebhookById(webhookId: ID!): null

  # Get JSON Schema definition for webhook payload by event
  # @param String! event 
  # @return [JsonSchemaDto]
  GetJsonSchemaForWebhookEvent(event: String!): JsonSchemaDto

  # Get JSON Schema definition for webhook payload
  # @param ID! webhookId 
  # @return [JsonSchemaDto]
  GetJsonSchemaForWebhookPayload(webhookId: ID!): JsonSchemaDto

  # Get example payload for webhook
  # @param ID! webhookId 
  # @return [AbstractWebhookPayload]
  GetTestWebhookPayloadForWebhook(webhookId: ID!): AbstractWebhookPayload

  # Redrive all webhook results that have failed status
  # Allows you to resend webhook payloads for any recorded webhook result that failed to deliver the payload.
  # @return [WebhookRedriveAllResult]
  RedriveAllWebhookResults(): WebhookRedriveAllResult

  # Get a webhook result and try to resend the original webhook payload
  # Allows you to resend a webhook payload that was already sent. Webhooks that fail are retried automatically for 24 hours and then put in a dead letter queue. You can retry results manually using this method.
  # @param ID! webhookResultId Webhook Result ID
  # @return [WebhookRedriveResult]
  RedriveWebhookResult(webhookResultId: ID!): WebhookRedriveResult

  # Send webhook test data
  # @param ID! webhookId 
  # @return [WebhookTestResult]
  SendTestData(webhookId: ID!): WebhookTestResult

  # Update a webhook request headers
  # @param ID! webhookId 
  # @param WebhookHeaders webhookHeaders 
  # @return [WebhookDto]
  UpdateWebhookHeaders(webhookId: ID!, webhookHeaders: WebhookHeaders): WebhookDto

  # Verify a webhook payload signature
  # Verify a webhook payload using the messageId and signature. This allows you to be sure that MailSlurp sent the payload and not another server.
  # @param VerifyWebhookSignatureOptions verifyWebhookSignatureOptions 
  # @return [VerifyWebhookSignatureResults]
  VerifyWebhookSignature(verifyWebhookSignatureOptions: VerifyWebhookSignatureOptions): VerifyWebhookSignatureResults

}

type query {
  # List account webhooks Paginated
  # List account webhooks in paginated form. Allows for page index, page size, and sort direction.
  # @param Int! page Optional page index in list pagination
  # @param Int! size Optional page size for paginated result list.
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param String! eventType Optional event type
  # @param String! since Filter by created at after the given timestamp
  # @param String! before Filter by created at before the given timestamp
  # @return [PageWebhookProjection]
  GetAllAccountWebhooks(page: Int!, size: Int!, sort: String!, eventType: String!, since: String!, before: String!): PageWebhookProjection

  # Get results for all webhooks
  # @param Int! page Optional page index in list pagination
  # @param Int! size Optional page size in list pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param String! searchFilter Optional search filter
  # @param String! since Filter by created at after the given timestamp
  # @param String! before Filter by created at before the given timestamp
  # @param Boolean! unseenOnly Filter for unseen exceptions only
  # @param String! resultType Filter by result type
  # @param String! eventName Filter by event name
  # @param Int! minStatusCode Minimum response status
  # @param Int! maxStatusCode Maximum response status
  # @param ID! inboxId Inbox ID
  # @param ID! smsId Sms ID
  # @param ID! attachmentId Attachment ID
  # @param ID! emailId Email ID
  # @param ID! phoneId Phone ID
  # @return [PageWebhookResult]
  GetAllWebhookResults(page: Int!, size: Int!, sort: String!, searchFilter: String!, since: String!, before: String!, unseenOnly: Boolean!, resultType: String!, eventName: String!, minStatusCode: Int!, maxStatusCode: Int!, inboxId: ID!, smsId: ID!, attachmentId: ID!, emailId: ID!, phoneId: ID!): PageWebhookResult

  # List Webhooks Paginated
  # List webhooks in paginated form. Allows for page index, page size, and sort direction.
  # @param Int! page Optional page index in list pagination
  # @param Int! size Optional page size for paginated result list.
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param String! searchFilter Optional search filter
  # @param String! since Filter by created at after the given timestamp
  # @param ID! inboxId Filter by inboxId
  # @param ID! phoneId Filter by phoneId
  # @param String! before Filter by created at before the given timestamp
  # @return [PageWebhookProjection]
  GetAllWebhooks(page: Int!, size: Int!, sort: String!, searchFilter: String!, since: String!, inboxId: ID!, phoneId: ID!, before: String!): PageWebhookProjection

  # Get paginated webhooks for an Inbox
  # @param ID! inboxId 
  # @param Int! page Optional page index in list pagination
  # @param Int! size Optional page size in list pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param String! searchFilter Optional search filter
  # @param String! since Filter by created at after the given timestamp
  # @param String! before Filter by created at before the given timestamp
  # @return [PageWebhookProjection]
  GetInboxWebhooksPaginated(inboxId: ID!, page: Int!, size: Int!, sort: String!, searchFilter: String!, since: String!, before: String!): PageWebhookProjection

  # Get paginated webhooks for a phone number
  # @param ID! phoneId 
  # @param Int! page Optional page index in list pagination
  # @param Int! size Optional page size in list pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param String! since Filter by created at after the given timestamp
  # @param String! before Filter by created at before the given timestamp
  # @return [PageWebhookProjection]
  GetPhoneNumberWebhooksPaginated(phoneId: ID!, page: Int!, size: Int!, sort: String!, since: String!, before: String!): PageWebhookProjection

  # Get test webhook payload example. Response content depends on eventName passed. Uses &#x60;EMAIL_RECEIVED&#x60; as default.
  # @param String! eventName 
  # @return [AbstractWebhookPayload]
  GetTestWebhookPayload(eventName: String!): AbstractWebhookPayload

  # Get webhook test payload for bounce
  # @return [WebhookBouncePayload]
  GetTestWebhookPayloadBounce(): WebhookBouncePayload

  # Get webhook test payload for bounce recipient
  # @return [WebhookBounceRecipientPayload]
  GetTestWebhookPayloadBounceRecipient(): WebhookBounceRecipientPayload

  # Get webhook test payload for delivery status event
  # @return [WebhookDeliveryStatusPayload]
  GetTestWebhookPayloadDeliveryStatus(): WebhookDeliveryStatusPayload

  # Get webhook test payload for email opened event
  # @return [WebhookEmailOpenedPayload]
  GetTestWebhookPayloadEmailOpened(): WebhookEmailOpenedPayload

  # Get webhook test payload for email opened event
  # @return [WebhookEmailReadPayload]
  GetTestWebhookPayloadEmailRead(): WebhookEmailReadPayload

  # Get webhook test payload for new attachment event
  # @return [WebhookNewAttachmentPayload]
  GetTestWebhookPayloadNewAttachment(): WebhookNewAttachmentPayload

  # Get webhook test payload for new contact event
  # @return [WebhookNewContactPayload]
  GetTestWebhookPayloadNewContact(): WebhookNewContactPayload

  # Get webhook test payload for new email event
  # @return [WebhookNewEmailPayload]
  GetTestWebhookPayloadNewEmail(): WebhookNewEmailPayload

  # Get webhook test payload for new sms event
  # @return [WebhookNewSmsPayload]
  GetTestWebhookPayloadNewSms(): WebhookNewSmsPayload

  # Get a webhook
  # @param ID! webhookId 
  # @return [WebhookDto]
  GetWebhook(webhookId: ID!): WebhookDto

  # Get a webhook result for a webhook
  # @param ID! webhookResultId Webhook Result ID
  # @return [WebhookResultDto]
  GetWebhookResult(webhookResultId: ID!): WebhookResultDto

  # Get a webhook results for a webhook
  # @param ID! webhookId ID of webhook to get results for
  # @param Int! page Optional page index in list pagination
  # @param Int! size Optional page size in list pagination
  # @param String! sort Optional createdAt sort direction ASC or DESC
  # @param String! searchFilter Optional search filter
  # @param String! since Filter by created at after the given timestamp
  # @param String! before Filter by created at before the given timestamp
  # @param Boolean! unseenOnly Filter for unseen exceptions only
  # @param String! resultType Filter by result type
  # @param String! eventName Filter by event name
  # @param Int! minStatusCode Minimum response status
  # @param Int! maxStatusCode Maximum response status
  # @param ID! inboxId Inbox ID
  # @param ID! smsId Sms ID
  # @param ID! attachmentId Attachment ID
  # @param ID! emailId Email ID
  # @param ID! phoneId Phone ID
  # @return [PageWebhookResult]
  GetWebhookResults(webhookId: ID!, page: Int!, size: Int!, sort: String!, searchFilter: String!, since: String!, before: String!, unseenOnly: Boolean!, resultType: String!, eventName: String!, minStatusCode: Int!, maxStatusCode: Int!, inboxId: ID!, smsId: ID!, attachmentId: ID!, emailId: ID!, phoneId: ID!): PageWebhookResult

  # Get a webhook results count for a webhook
  # @param ID! webhookId ID of webhook to get results for
  # @return [CountDto]
  GetWebhookResultsCount(webhookId: ID!): CountDto

  # Get count of unseen webhook results with error status
  # @return [UnseenErrorCountDto]
  GetWebhookResultsUnseenErrorCount(): UnseenErrorCountDto

  # Get all webhooks for an Inbox
  # @param ID! inboxId 
  # @return [[WebhookDto]]
  GetWebhooks(inboxId: ID!): [WebhookDto]

  # Wait for webhook results for a webhook
  # @param ID! webhookId ID of webhook to get results for
  # @param Int! expectedCount Expected result count
  # @param Int! timeout Max time to wait in milliseconds
  # @return [[WebhookResultDto]]
  WaitForWebhookResults(webhookId: ID!, expectedCount: Int!, timeout: Int!): [WebhookResultDto]

}

