# MailSlurp API
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# The version of the OpenAPI document: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

# Conditions to apply to emails that you are waiting for
type WaitForSmsConditions {

  # ID of phone number to search within and apply conditions to. Essentially filtering the SMS found to give a count.
  phoneNumberId: ID!

  # Limit results
  limit: Int!

  # Number of results that should match conditions. Either exactly or at least this amount based on the &#x60;countType&#x60;. If count condition is not met and the timeout has not been reached the &#x60;waitFor&#x60; method will retry the operation.
  count: Int!

  # Max time in milliseconds to wait between retries if a &#x60;timeout&#x60; is specified.
  delayTimeout: Int!

  # Max time in milliseconds to retry the &#x60;waitFor&#x60; operation until conditions are met.
  timeout: Int!

  # Apply conditions only to **unread** SMS. All SMS messages begin with &#x60;read&#x3D;false&#x60;. An SMS is marked &#x60;read&#x3D;true&#x60; when an &#x60;SMS&#x60; has been returned to the user at least once. For example you have called &#x60;getSms&#x60; or &#x60;waitForSms&#x60; etc., or you have viewed the SMS in the dashboard.
  unreadOnly: Boolean!

  # How result size should be compared with the expected size. Exactly or at-least matching result?
  countType: CountType

  # Conditions that should be matched for an SMS to qualify for results. Each condition will be applied in order to each SMS within a phone number to filter a result list of matching SMSs you are waiting for.
  matches: [SmsMatchOption]

  # Direction to sort matching SMSs by created time
  sortDirection: SortDirection

  # ISO Date Time earliest time of SMS to consider. Filter for matching SMSs that were received after this date
  since: String!

  # ISO Date Time latest time of SMS to consider. Filter for matching SMSs that were received before this date
  before: String!

}

# How result size should be compared with the expected size. Exactly or at-least matching result?
enum CountType {
  EXACTLY
  ATLEAST
}

# Direction to sort matching SMSs by created time
enum SortDirection {
  ASC
  DESC
}
